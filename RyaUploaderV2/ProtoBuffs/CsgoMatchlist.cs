// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matchinfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RyaUploaderV2.ProtoBufs
{

    /// <summary>Holder for reflection information generated from matchinfo.proto</summary>
    public static partial class MatchinfoReflection
    {

        #region Descriptor
        /// <summary>File descriptor for matchinfo.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MatchinfoReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "Cg9tYXRjaGluZm8ucHJvdG8i6wEKHENNc2dHQ0NTdHJpa2UxNV92Ml9NYXRj",
                    "aExpc3QSFAoMbXNncmVxdWVzdGlkGAEgASgNEhEKCWFjY291bnRpZBgCIAEo",
                    "DRISCgpzZXJ2ZXJ0aW1lGAMgASgNEi8KB21hdGNoZXMYBCADKAsyHi5DRGF0",
                    "YUdDQ1N0cmlrZTE1X3YyX01hdGNoSW5mbxIgCgdzdHJlYW1zGAUgAygLMg8u",
                    "VG91cm5hbWVudFRlYW0SOwoOdG91cm5hbWVudGluZm8YBiABKAsyIy5DRGF0",
                    "YUdDQ1N0cmlrZTE1X3YyX1RvdXJuYW1lbnRJbmZvIogCCh1DRGF0YUdDQ1N0",
                    "cmlrZTE1X3YyX01hdGNoSW5mbxIPCgdtYXRjaGlkGAEgASgEEhEKCW1hdGNo",
                    "dGltZRgCIAEoDRIvChJ3YXRjaGFibGVtYXRjaGluZm8YAyABKAsyEy5XYXRj",
                    "aGFibGVNYXRjaEluZm8SSgoRcm91bmRzdGF0c19sZWdhY3kYBCABKAsyLy5D",
                    "TXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdTZXJ2ZXJSb3VuZFN0YXRz",
                    "EkYKDXJvdW5kc3RhdHNhbGwYBSADKAsyLy5DTXNnR0NDU3RyaWtlMTVfdjJf",
                    "TWF0Y2htYWtpbmdTZXJ2ZXJSb3VuZFN0YXRzIrACChJXYXRjaGFibGVNYXRj",
                    "aEluZm8SEQoJc2VydmVyX2lwGAEgASgNEg8KB3R2X3BvcnQYAiABKA0SFQoN",
                    "dHZfc3BlY3RhdG9ycxgDIAEoDRIPCgd0dl90aW1lGAQgASgNEhkKEXR2X3dh",
                    "dGNoX3Bhc3N3b3JkGAUgASgMEhoKEmNsX2RlY3J5cHRkYXRhX2tleRgGIAEo",
                    "BBIeChZjbF9kZWNyeXB0ZGF0YV9rZXlfcHViGAcgASgEEhEKCWdhbWVfdHlw",
                    "ZRgIIAEoDRIVCg1nYW1lX21hcGdyb3VwGAkgASgJEhAKCGdhbWVfbWFwGAog",
                    "ASgJEhEKCXNlcnZlcl9pZBgLIAEoBBIQCghtYXRjaF9pZBgMIAEoBBIWCg5y",
                    "ZXNlcnZhdGlvbl9pZBgNIAEoBCL/BQouQ01zZ0dDQ1N0cmlrZTE1X3YyX01h",
                    "dGNobWFraW5nU2VydmVyUm91bmRTdGF0cxIVCg1yZXNlcnZhdGlvbmlkGAEg",
                    "ASgEEkQKC3Jlc2VydmF0aW9uGAIgASgLMi8uQ01zZ0dDQ1N0cmlrZTE1X3Yy",
                    "X01hdGNobWFraW5nR0MyU2VydmVyUmVzZXJ2ZRILCgNtYXAYAyABKAkSDQoF",
                    "cm91bmQYBCABKAUSDQoFa2lsbHMYBSADKAUSDwoHYXNzaXN0cxgGIAMoBRIO",
                    "CgZkZWF0aHMYByADKAUSDgoGc2NvcmVzGAggAygFEg0KBXBpbmdzGAkgAygF",
                    "EhQKDHJvdW5kX3Jlc3VsdBgKIAEoBRIUCgxtYXRjaF9yZXN1bHQYCyABKAUS",
                    "EwoLdGVhbV9zY29yZXMYDCADKAUSQAoHY29uZmlybRgNIAEoCzIvLkNNc2dH",
                    "Q0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ0dDMlNlcnZlckNvbmZpcm0SGQoR",
                    "cmVzZXJ2YXRpb25fc3RhZ2UYDiABKAUSFgoObWF0Y2hfZHVyYXRpb24YDyAB",
                    "KAUSEwoLZW5lbXlfa2lsbHMYECADKAUSFwoPZW5lbXlfaGVhZHNob3RzGBEg",
                    "AygFEhEKCWVuZW15XzNrcxgSIAMoBRIRCgllbmVteV80a3MYEyADKAUSEQoJ",
                    "ZW5lbXlfNWtzGBQgAygFEgwKBG12cHMYFSADKAUSGAoQc3BlY3RhdG9yc19j",
                    "b3VudBgWIAEoDRIbChNzcGVjdGF0b3JzX2NvdW50X3R2GBcgASgNEhwKFHNw",
                    "ZWN0YXRvcnNfY291bnRfbG5rGBggASgNEhcKD2VuZW15X2tpbGxzX2FnZxgZ",
                    "IAMoBRJLCglkcm9wX2luZm8YGiABKAsyOC5DTXNnR0NDU3RyaWtlMTVfdjJf",
                    "TWF0Y2htYWtpbmdTZXJ2ZXJSb3VuZFN0YXRzLkRyb3BJbmZvGh8KCERyb3BJ",
                    "bmZvEhMKC2FjY291bnRfbXZwGAEgASgNIvIDCi5DTXNnR0NDU3RyaWtlMTVf",
                    "djJfTWF0Y2htYWtpbmdHQzJTZXJ2ZXJSZXNlcnZlEhMKC2FjY291bnRfaWRz",
                    "GAEgAygNEhEKCWdhbWVfdHlwZRgCIAEoDRIQCghtYXRjaF9pZBgDIAEoBBIW",
                    "Cg5zZXJ2ZXJfdmVyc2lvbhgEIAEoDRIkCghyYW5raW5ncxgFIAMoCzISLlBs",
                    "YXllclJhbmtpbmdJbmZvEhYKDmVuY3J5cHRpb25fa2V5GAYgASgEEhoKEmVu",
                    "Y3J5cHRpb25fa2V5X3B1YhgHIAEoBBIRCglwYXJ0eV9pZHMYCCADKA0SIQoJ",
                    "d2hpdGVsaXN0GAkgAygLMg4uSXBBZGRyZXNzTWFzaxIZChF0dl9tYXN0ZXJf",
                    "c3RlYW1pZBgKIAEoBBIqChB0b3VybmFtZW50X2V2ZW50GAsgASgLMhAuVG91",
                    "cm5hbWVudEV2ZW50EikKEHRvdXJuYW1lbnRfdGVhbXMYDCADKAsyDy5Ub3Vy",
                    "bmFtZW50VGVhbRImCh50b3VybmFtZW50X2Nhc3RlcnNfYWNjb3VudF9pZHMY",
                    "DSADKA0SGAoQdHZfcmVsYXlfc3RlYW1pZBgOIAEoBBIqCg5wcmVfbWF0Y2hf",
                    "ZGF0YRgPIAEoCzISLkNQcmVNYXRjaEluZm9EYXRhIlsKEVBsYXllclJhbmtp",
                    "bmdJbmZvEhIKCmFjY291bnRfaWQYASABKA0SDwoHcmFua19pZBgCIAEoDRIM",
                    "CgR3aW5zGAMgASgNEhMKC3JhbmtfY2hhbmdlGAQgASgCIlgKDUlwQWRkcmVz",
                    "c01hc2sSCQoBYRgBIAEoDRIJCgFiGAIgASgNEgkKAWMYAyABKA0SCQoBZBgE",
                    "IAEoDRIMCgRiaXRzGAUgASgNEg0KBXRva2VuGAYgASgNIt8BCg9Ub3VybmFt",
                    "ZW50RXZlbnQSEAoIZXZlbnRfaWQYASABKAUSEQoJZXZlbnRfdGFnGAIgASgJ",
                    "EhIKCmV2ZW50X25hbWUYAyABKAkSGAoQZXZlbnRfdGltZV9zdGFydBgEIAEo",
                    "DRIWCg5ldmVudF90aW1lX2VuZBgFIAEoDRIUCgxldmVudF9wdWJsaWMYBiAB",
                    "KAUSFgoOZXZlbnRfc3RhZ2VfaWQYByABKAUSGAoQZXZlbnRfc3RhZ2VfbmFt",
                    "ZRgIIAEoCRIZChFhY3RpdmVfc2VjdGlvbl9pZBgJIAEoDSLtAQoRQ1ByZU1h",
                    "dGNoSW5mb0RhdGESFwoPcHJlZGljdGlvbnNfcGN0GAEgASgFEjgKBWRyYWZ0",
                    "GAQgASgLMikuQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50TWF0Y2hE",
                    "cmFmdBIrCgVzdGF0cxgFIAMoCzIcLkNQcmVNYXRjaEluZm9EYXRhLlRlYW1T",
                    "dGF0cxpYCglUZWFtU3RhdHMSGQoRbWF0Y2hfaW5mb19pZHh0eHQYASABKAUS",
                    "FgoObWF0Y2hfaW5mb190eHQYAiABKAkSGAoQbWF0Y2hfaW5mb190ZWFtcxgD",
                    "IAMoCSLWAgooQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50TWF0Y2hE",
                    "cmFmdBIQCghldmVudF9pZBgBIAEoBRIWCg5ldmVudF9zdGFnZV9pZBgCIAEo",
                    "BRIRCgl0ZWFtX2lkXzAYAyABKAUSEQoJdGVhbV9pZF8xGAQgASgFEhIKCm1h",
                    "cHNfY291bnQYBSABKAUSFAoMbWFwc19jdXJyZW50GAYgASgFEhUKDXRlYW1f",
                    "aWRfc3RhcnQYByABKAUSFQoNdGVhbV9pZF92ZXRvMRgIIAEoBRIVCg10ZWFt",
                    "X2lkX3BpY2tuGAkgASgFEj8KBmRyYWZ0cxgKIAMoCzIvLkNEYXRhR0NDU3Ry",
                    "aWtlMTVfdjJfVG91cm5hbWVudE1hdGNoRHJhZnQuRW50cnkaKgoFRW50cnkS",
                    "DQoFbWFwaWQYASABKAUSEgoKdGVhbV9pZF9jdBgCIAEoBSJgCi5DTXNnR0ND",
                    "U3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdHQzJTZXJ2ZXJDb25maXJtEg0KBXRv",
                    "a2VuGAEgASgNEg0KBXN0YW1wGAIgASgNEhAKCGV4Y2hhbmdlGAMgASgEIn0K",
                    "DlRvdXJuYW1lbnRUZWFtEg8KB3RlYW1faWQYASABKAUSEAoIdGVhbV90YWcY",
                    "AiABKAkSEQoJdGVhbV9mbGFnGAMgASgJEhEKCXRlYW1fbmFtZRgEIAEoCRIi",
                    "CgdwbGF5ZXJzGAUgAygLMhEuVG91cm5hbWVudFBsYXllciKnAQoQVG91cm5h",
                    "bWVudFBsYXllchISCgphY2NvdW50X2lkGAEgASgNEhMKC3BsYXllcl9uaWNr",
                    "GAIgASgJEhMKC3BsYXllcl9uYW1lGAMgASgJEhIKCnBsYXllcl9kb2IYBCAB",
                    "KA0SEwoLcGxheWVyX2ZsYWcYBSABKAkSFwoPcGxheWVyX2xvY2F0aW9uGAYg",
                    "ASgJEhMKC3BsYXllcl9kZXNjGAcgASgJIrUBCiJDRGF0YUdDQ1N0cmlrZTE1",
                    "X3YyX1RvdXJuYW1lbnRJbmZvEjgKCHNlY3Rpb25zGAEgAygLMiYuQ0RhdGFH",
                    "Q0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50U2VjdGlvbhIqChB0b3VybmFtZW50",
                    "X2V2ZW50GAIgASgLMhAuVG91cm5hbWVudEV2ZW50EikKEHRvdXJuYW1lbnRf",
                    "dGVhbXMYAyADKAsyDy5Ub3VybmFtZW50VGVhbSKMAQolQ0RhdGFHQ0NTdHJp",
                    "a2UxNV92Ml9Ub3VybmFtZW50U2VjdGlvbhIRCglzZWN0aW9uaWQYASABKA0S",
                    "DAoEbmFtZRgCIAEoCRIMCgRkZXNjGAMgASgJEjQKBmdyb3VwcxgEIAMoCzIk",
                    "LkNEYXRhR0NDU3RyaWtlMTVfdjJfVG91cm5hbWVudEdyb3VwItkCCiNDRGF0",
                    "YUdDQ1N0cmlrZTE1X3YyX1RvdXJuYW1lbnRHcm91cBIPCgdncm91cGlkGAEg",
                    "ASgNEgwKBG5hbWUYAiABKAkSDAoEZGVzYxgDIAEoCRIZChFwaWNrc19fZGVw",
                    "cmVjYXRlZBgEIAEoDRI3CgV0ZWFtcxgFIAMoCzIoLkNEYXRhR0NDU3RyaWtl",
                    "MTVfdjJfVG91cm5hbWVudEdyb3VwVGVhbRIRCglzdGFnZV9pZHMYBiADKAUS",
                    "GQoRcGlja2xvY2t1bnRpbHRpbWUYByABKA0SFQoNcGlja2FibGV0ZWFtcxgI",
                    "IAEoDRIXCg9wb2ludHNfcGVyX3BpY2sYCSABKA0SOQoFcGlja3MYCiADKAsy",
                    "Ki5DRGF0YUdDQ1N0cmlrZTE1X3YyX1RvdXJuYW1lbnRHcm91cC5QaWNrcxoY",
                    "CgVQaWNrcxIPCgdwaWNraWRzGAEgAygFIl4KJ0NEYXRhR0NDU3RyaWtlMTVf",
                    "djJfVG91cm5hbWVudEdyb3VwVGVhbRIPCgd0ZWFtX2lkGAEgASgFEg0KBXNj",
                    "b3JlGAIgASgFEhMKC2NvcnJlY3RwaWNrGAMgASgIQhqqAhdSeWFVcGxvYWRl",
                    "clYyLlByb3RvQnVmcw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchList), global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchList.Parser, new[]{ "Msgrequestid", "Accountid", "Servertime", "Matches", "Streams", "Tournamentinfo" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo.Parser, new[]{ "Matchid", "Matchtime", "Watchablematchinfo", "RoundstatsLegacy", "Roundstatsall" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo), global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo.Parser, new[]{ "ServerIp", "TvPort", "TvSpectators", "TvTime", "TvWatchPassword", "ClDecryptdataKey", "ClDecryptdataKeyPub", "GameType", "GameMapgroup", "GameMap", "ServerId", "MatchId", "ReservationId" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats), global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Parser, new[]{ "Reservationid", "Reservation", "Map", "Round", "Kills", "Assists", "Deaths", "Scores", "Pings", "RoundResult", "MatchResult", "TeamScores", "Confirm", "ReservationStage", "MatchDuration", "EnemyKills", "EnemyHeadshots", "Enemy3Ks", "Enemy4Ks", "Enemy5Ks", "Mvps", "SpectatorsCount", "SpectatorsCountTv", "SpectatorsCountLnk", "EnemyKillsAgg", "DropInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo), global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo.Parser, new[]{ "AccountMvp" }, null, null, null)}),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve), global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Parser, new[]{ "AccountIds", "GameType", "MatchId", "ServerVersion", "Rankings", "EncryptionKey", "EncryptionKeyPub", "PartyIds", "Whitelist", "TvMasterSteamid", "TournamentEvent", "TournamentTeams", "TournamentCastersAccountIds", "TvRelaySteamid", "PreMatchData" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo), global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo.Parser, new[]{ "AccountId", "RankId", "Wins", "RankChange" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.IpAddressMask), global::RyaUploaderV2.ProtoBufs.IpAddressMask.Parser, new[]{ "A", "B", "C", "D", "Bits", "Token" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.TournamentEvent), global::RyaUploaderV2.ProtoBufs.TournamentEvent.Parser, new[]{ "EventId", "EventTag", "EventName", "EventTimeStart", "EventTimeEnd", "EventPublic", "EventStageId", "EventStageName", "ActiveSectionId" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData), global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Parser, new[]{ "PredictionsPct", "Draft", "Stats" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats), global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats.Parser, new[]{ "MatchInfoIdxtxt", "MatchInfoTxt", "MatchInfoTeams" }, null, null, null)}),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Parser, new[]{ "EventId", "EventStageId", "TeamId0", "TeamId1", "MapsCount", "MapsCurrent", "TeamIdStart", "TeamIdVeto1", "TeamIdPickn", "Drafts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Parser, new[]{ "Mapid", "TeamIdCt" }, null, null, null)}),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm), global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Parser, new[]{ "Token", "Stamp", "Exchange" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.TournamentTeam), global::RyaUploaderV2.ProtoBufs.TournamentTeam.Parser, new[]{ "TeamId", "TeamTag", "TeamFlag", "TeamName", "Players" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.TournamentPlayer), global::RyaUploaderV2.ProtoBufs.TournamentPlayer.Parser, new[]{ "AccountId", "PlayerNick", "PlayerName", "PlayerDob", "PlayerFlag", "PlayerLocation", "PlayerDesc" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo.Parser, new[]{ "Sections", "TournamentEvent", "TournamentTeams" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection.Parser, new[]{ "Sectionid", "Name", "Desc", "Groups" }, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Parser, new[]{ "Groupid", "Name", "Desc", "PicksDeprecated", "Teams", "StageIds", "Picklockuntiltime", "Pickableteams", "PointsPerPick", "Picks" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks.Parser, new[]{ "Pickids" }, null, null, null)}),
                    new pbr::GeneratedClrTypeInfo(typeof(global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam), global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam.Parser, new[]{ "TeamId", "Score", "Correctpick" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class CMsgGCCStrike15_v2_MatchList : pb::IMessage<CMsgGCCStrike15_v2_MatchList>
    {
        private static readonly pb::MessageParser<CMsgGCCStrike15_v2_MatchList> _parser = new pb::MessageParser<CMsgGCCStrike15_v2_MatchList>(() => new CMsgGCCStrike15_v2_MatchList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMsgGCCStrike15_v2_MatchList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchList(CMsgGCCStrike15_v2_MatchList other) : this()
        {
            msgrequestid_ = other.msgrequestid_;
            accountid_ = other.accountid_;
            servertime_ = other.servertime_;
            matches_ = other.matches_.Clone();
            streams_ = other.streams_.Clone();
            Tournamentinfo = other.tournamentinfo_ != null ? other.Tournamentinfo.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchList Clone()
        {
            return new CMsgGCCStrike15_v2_MatchList(this);
        }

        /// <summary>Field number for the "msgrequestid" field.</summary>
        public const int MsgrequestidFieldNumber = 1;
        private uint msgrequestid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Msgrequestid
        {
            get { return msgrequestid_; }
            set
            {
                msgrequestid_ = value;
            }
        }

        /// <summary>Field number for the "accountid" field.</summary>
        public const int AccountidFieldNumber = 2;
        private uint accountid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Accountid
        {
            get { return accountid_; }
            set
            {
                accountid_ = value;
            }
        }

        /// <summary>Field number for the "servertime" field.</summary>
        public const int ServertimeFieldNumber = 3;
        private uint servertime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Servertime
        {
            get { return servertime_; }
            set
            {
                servertime_ = value;
            }
        }

        /// <summary>Field number for the "matches" field.</summary>
        public const int MatchesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo> _repeated_matches_codec
            = pb::FieldCodec.ForMessage(34, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo> matches_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_MatchInfo> Matches
        {
            get { return matches_; }
        }

        /// <summary>Field number for the "streams" field.</summary>
        public const int StreamsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.TournamentTeam> _repeated_streams_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.TournamentTeam.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> streams_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> Streams
        {
            get { return streams_; }
        }

        /// <summary>Field number for the "tournamentinfo" field.</summary>
        public const int TournamentinfoFieldNumber = 6;
        private global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo tournamentinfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo Tournamentinfo
        {
            get { return tournamentinfo_; }
            set
            {
                tournamentinfo_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CMsgGCCStrike15_v2_MatchList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMsgGCCStrike15_v2_MatchList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Msgrequestid != other.Msgrequestid) return false;
            if (Accountid != other.Accountid) return false;
            if (Servertime != other.Servertime) return false;
            if (!matches_.Equals(other.matches_)) return false;
            if (!streams_.Equals(other.streams_)) return false;
            if (!object.Equals(Tournamentinfo, other.Tournamentinfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Msgrequestid != 0) hash ^= Msgrequestid.GetHashCode();
            if (Accountid != 0) hash ^= Accountid.GetHashCode();
            if (Servertime != 0) hash ^= Servertime.GetHashCode();
            hash ^= matches_.GetHashCode();
            hash ^= streams_.GetHashCode();
            if (tournamentinfo_ != null) hash ^= Tournamentinfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Msgrequestid != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Msgrequestid);
            }
            if (Accountid != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Accountid);
            }
            if (Servertime != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Servertime);
            }
            matches_.WriteTo(output, _repeated_matches_codec);
            streams_.WriteTo(output, _repeated_streams_codec);
            if (tournamentinfo_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Tournamentinfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Msgrequestid != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Msgrequestid);
            }
            if (Accountid != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accountid);
            }
            if (Servertime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servertime);
            }
            size += matches_.CalculateSize(_repeated_matches_codec);
            size += streams_.CalculateSize(_repeated_streams_codec);
            if (tournamentinfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tournamentinfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMsgGCCStrike15_v2_MatchList other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Msgrequestid != 0)
            {
                Msgrequestid = other.Msgrequestid;
            }
            if (other.Accountid != 0)
            {
                Accountid = other.Accountid;
            }
            if (other.Servertime != 0)
            {
                Servertime = other.Servertime;
            }
            matches_.Add(other.matches_);
            streams_.Add(other.streams_);
            if (other.tournamentinfo_ != null)
            {
                if (tournamentinfo_ == null)
                {
                    tournamentinfo_ = new global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo();
                }
                Tournamentinfo.MergeFrom(other.Tournamentinfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Msgrequestid = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        Accountid = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        Servertime = input.ReadUInt32();
                        break;
                    }
                    case 34:
                    {
                        matches_.AddEntriesFrom(input, _repeated_matches_codec);
                        break;
                    }
                    case 42:
                    {
                        streams_.AddEntriesFrom(input, _repeated_streams_codec);
                        break;
                    }
                    case 50:
                    {
                        if (tournamentinfo_ == null)
                        {
                            tournamentinfo_ = new global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentInfo();
                        }
                        input.ReadMessage(tournamentinfo_);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CDataGCCStrike15_v2_MatchInfo : pb::IMessage<CDataGCCStrike15_v2_MatchInfo>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_MatchInfo> _parser = new pb::MessageParser<CDataGCCStrike15_v2_MatchInfo>(() => new CDataGCCStrike15_v2_MatchInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_MatchInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_MatchInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_MatchInfo(CDataGCCStrike15_v2_MatchInfo other) : this()
        {
            matchid_ = other.matchid_;
            matchtime_ = other.matchtime_;
            Watchablematchinfo = other.watchablematchinfo_ != null ? other.Watchablematchinfo.Clone() : null;
            RoundstatsLegacy = other.roundstatsLegacy_ != null ? other.RoundstatsLegacy.Clone() : null;
            roundstatsall_ = other.roundstatsall_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_MatchInfo Clone()
        {
            return new CDataGCCStrike15_v2_MatchInfo(this);
        }

        /// <summary>Field number for the "matchid" field.</summary>
        public const int MatchidFieldNumber = 1;
        private ulong matchid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Matchid
        {
            get { return matchid_; }
            set
            {
                matchid_ = value;
            }
        }

        /// <summary>Field number for the "matchtime" field.</summary>
        public const int MatchtimeFieldNumber = 2;
        private uint matchtime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Matchtime
        {
            get { return matchtime_; }
            set
            {
                matchtime_ = value;
            }
        }

        /// <summary>Field number for the "watchablematchinfo" field.</summary>
        public const int WatchablematchinfoFieldNumber = 3;
        private global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo watchablematchinfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo Watchablematchinfo
        {
            get { return watchablematchinfo_; }
            set
            {
                watchablematchinfo_ = value;
            }
        }

        /// <summary>Field number for the "roundstats_legacy" field.</summary>
        public const int RoundstatsLegacyFieldNumber = 4;
        private global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsLegacy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats RoundstatsLegacy
        {
            get { return roundstatsLegacy_; }
            set
            {
                roundstatsLegacy_ = value;
            }
        }

        /// <summary>Field number for the "roundstatsall" field.</summary>
        public const int RoundstatsallFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats> _repeated_roundstatsall_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats> roundstatsall_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats> Roundstatsall
        {
            get { return roundstatsall_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_MatchInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_MatchInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Matchid != other.Matchid) return false;
            if (Matchtime != other.Matchtime) return false;
            if (!object.Equals(Watchablematchinfo, other.Watchablematchinfo)) return false;
            if (!object.Equals(RoundstatsLegacy, other.RoundstatsLegacy)) return false;
            if (!roundstatsall_.Equals(other.roundstatsall_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Matchid != 0UL) hash ^= Matchid.GetHashCode();
            if (Matchtime != 0) hash ^= Matchtime.GetHashCode();
            if (watchablematchinfo_ != null) hash ^= Watchablematchinfo.GetHashCode();
            if (roundstatsLegacy_ != null) hash ^= RoundstatsLegacy.GetHashCode();
            hash ^= roundstatsall_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Matchid != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(Matchid);
            }
            if (Matchtime != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Matchtime);
            }
            if (watchablematchinfo_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Watchablematchinfo);
            }
            if (roundstatsLegacy_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(RoundstatsLegacy);
            }
            roundstatsall_.WriteTo(output, _repeated_roundstatsall_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Matchid != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Matchid);
            }
            if (Matchtime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchtime);
            }
            if (watchablematchinfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchablematchinfo);
            }
            if (roundstatsLegacy_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundstatsLegacy);
            }
            size += roundstatsall_.CalculateSize(_repeated_roundstatsall_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_MatchInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Matchid != 0UL)
            {
                Matchid = other.Matchid;
            }
            if (other.Matchtime != 0)
            {
                Matchtime = other.Matchtime;
            }
            if (other.watchablematchinfo_ != null)
            {
                if (watchablematchinfo_ == null)
                {
                    watchablematchinfo_ = new global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo();
                }
                Watchablematchinfo.MergeFrom(other.Watchablematchinfo);
            }
            if (other.roundstatsLegacy_ != null)
            {
                if (roundstatsLegacy_ == null)
                {
                    roundstatsLegacy_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
                }
                RoundstatsLegacy.MergeFrom(other.RoundstatsLegacy);
            }
            roundstatsall_.Add(other.roundstatsall_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Matchid = input.ReadUInt64();
                        break;
                    }
                    case 16:
                    {
                        Matchtime = input.ReadUInt32();
                        break;
                    }
                    case 26:
                    {
                        if (watchablematchinfo_ == null)
                        {
                            watchablematchinfo_ = new global::RyaUploaderV2.ProtoBufs.WatchableMatchInfo();
                        }
                        input.ReadMessage(watchablematchinfo_);
                        break;
                    }
                    case 34:
                    {
                        if (roundstatsLegacy_ == null)
                        {
                            roundstatsLegacy_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
                        }
                        input.ReadMessage(roundstatsLegacy_);
                        break;
                    }
                    case 42:
                    {
                        roundstatsall_.AddEntriesFrom(input, _repeated_roundstatsall_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class WatchableMatchInfo : pb::IMessage<WatchableMatchInfo>
    {
        private static readonly pb::MessageParser<WatchableMatchInfo> _parser = new pb::MessageParser<WatchableMatchInfo>(() => new WatchableMatchInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WatchableMatchInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchableMatchInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchableMatchInfo(WatchableMatchInfo other) : this()
        {
            serverIp_ = other.serverIp_;
            tvPort_ = other.tvPort_;
            tvSpectators_ = other.tvSpectators_;
            tvTime_ = other.tvTime_;
            tvWatchPassword_ = other.tvWatchPassword_;
            clDecryptdataKey_ = other.clDecryptdataKey_;
            clDecryptdataKeyPub_ = other.clDecryptdataKeyPub_;
            gameType_ = other.gameType_;
            gameMapgroup_ = other.gameMapgroup_;
            gameMap_ = other.gameMap_;
            serverId_ = other.serverId_;
            matchId_ = other.matchId_;
            reservationId_ = other.reservationId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchableMatchInfo Clone()
        {
            return new WatchableMatchInfo(this);
        }

        /// <summary>Field number for the "server_ip" field.</summary>
        public const int ServerIpFieldNumber = 1;
        private uint serverIp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ServerIp
        {
            get { return serverIp_; }
            set
            {
                serverIp_ = value;
            }
        }

        /// <summary>Field number for the "tv_port" field.</summary>
        public const int TvPortFieldNumber = 2;
        private uint tvPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TvPort
        {
            get { return tvPort_; }
            set
            {
                tvPort_ = value;
            }
        }

        /// <summary>Field number for the "tv_spectators" field.</summary>
        public const int TvSpectatorsFieldNumber = 3;
        private uint tvSpectators_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TvSpectators
        {
            get { return tvSpectators_; }
            set
            {
                tvSpectators_ = value;
            }
        }

        /// <summary>Field number for the "tv_time" field.</summary>
        public const int TvTimeFieldNumber = 4;
        private uint tvTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TvTime
        {
            get { return tvTime_; }
            set
            {
                tvTime_ = value;
            }
        }

        /// <summary>Field number for the "tv_watch_password" field.</summary>
        public const int TvWatchPasswordFieldNumber = 5;
        private pb::ByteString tvWatchPassword_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TvWatchPassword
        {
            get { return tvWatchPassword_; }
            set
            {
                tvWatchPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "cl_decryptdata_key" field.</summary>
        public const int ClDecryptdataKeyFieldNumber = 6;
        private ulong clDecryptdataKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ClDecryptdataKey
        {
            get { return clDecryptdataKey_; }
            set
            {
                clDecryptdataKey_ = value;
            }
        }

        /// <summary>Field number for the "cl_decryptdata_key_pub" field.</summary>
        public const int ClDecryptdataKeyPubFieldNumber = 7;
        private ulong clDecryptdataKeyPub_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ClDecryptdataKeyPub
        {
            get { return clDecryptdataKeyPub_; }
            set
            {
                clDecryptdataKeyPub_ = value;
            }
        }

        /// <summary>Field number for the "game_type" field.</summary>
        public const int GameTypeFieldNumber = 8;
        private uint gameType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameType
        {
            get { return gameType_; }
            set
            {
                gameType_ = value;
            }
        }

        /// <summary>Field number for the "game_mapgroup" field.</summary>
        public const int GameMapgroupFieldNumber = 9;
        private string gameMapgroup_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameMapgroup
        {
            get { return gameMapgroup_; }
            set
            {
                gameMapgroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "game_map" field.</summary>
        public const int GameMapFieldNumber = 10;
        private string gameMap_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameMap
        {
            get { return gameMap_; }
            set
            {
                gameMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "server_id" field.</summary>
        public const int ServerIdFieldNumber = 11;
        private ulong serverId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ServerId
        {
            get { return serverId_; }
            set
            {
                serverId_ = value;
            }
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 12;
        private ulong matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        /// <summary>Field number for the "reservation_id" field.</summary>
        public const int ReservationIdFieldNumber = 13;
        private ulong reservationId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ReservationId
        {
            get { return reservationId_; }
            set
            {
                reservationId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as WatchableMatchInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WatchableMatchInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ServerIp != other.ServerIp) return false;
            if (TvPort != other.TvPort) return false;
            if (TvSpectators != other.TvSpectators) return false;
            if (TvTime != other.TvTime) return false;
            if (TvWatchPassword != other.TvWatchPassword) return false;
            if (ClDecryptdataKey != other.ClDecryptdataKey) return false;
            if (ClDecryptdataKeyPub != other.ClDecryptdataKeyPub) return false;
            if (GameType != other.GameType) return false;
            if (GameMapgroup != other.GameMapgroup) return false;
            if (GameMap != other.GameMap) return false;
            if (ServerId != other.ServerId) return false;
            if (MatchId != other.MatchId) return false;
            if (ReservationId != other.ReservationId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ServerIp != 0) hash ^= ServerIp.GetHashCode();
            if (TvPort != 0) hash ^= TvPort.GetHashCode();
            if (TvSpectators != 0) hash ^= TvSpectators.GetHashCode();
            if (TvTime != 0) hash ^= TvTime.GetHashCode();
            if (TvWatchPassword.Length != 0) hash ^= TvWatchPassword.GetHashCode();
            if (ClDecryptdataKey != 0UL) hash ^= ClDecryptdataKey.GetHashCode();
            if (ClDecryptdataKeyPub != 0UL) hash ^= ClDecryptdataKeyPub.GetHashCode();
            if (GameType != 0) hash ^= GameType.GetHashCode();
            if (GameMapgroup.Length != 0) hash ^= GameMapgroup.GetHashCode();
            if (GameMap.Length != 0) hash ^= GameMap.GetHashCode();
            if (ServerId != 0UL) hash ^= ServerId.GetHashCode();
            if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
            if (ReservationId != 0UL) hash ^= ReservationId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ServerIp != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(ServerIp);
            }
            if (TvPort != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TvPort);
            }
            if (TvSpectators != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(TvSpectators);
            }
            if (TvTime != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(TvTime);
            }
            if (TvWatchPassword.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteBytes(TvWatchPassword);
            }
            if (ClDecryptdataKey != 0UL)
            {
                output.WriteRawTag(48);
                output.WriteUInt64(ClDecryptdataKey);
            }
            if (ClDecryptdataKeyPub != 0UL)
            {
                output.WriteRawTag(56);
                output.WriteUInt64(ClDecryptdataKeyPub);
            }
            if (GameType != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(GameType);
            }
            if (GameMapgroup.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(GameMapgroup);
            }
            if (GameMap.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(GameMap);
            }
            if (ServerId != 0UL)
            {
                output.WriteRawTag(88);
                output.WriteUInt64(ServerId);
            }
            if (MatchId != 0UL)
            {
                output.WriteRawTag(96);
                output.WriteUInt64(MatchId);
            }
            if (ReservationId != 0UL)
            {
                output.WriteRawTag(104);
                output.WriteUInt64(ReservationId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ServerIp != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerIp);
            }
            if (TvPort != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TvPort);
            }
            if (TvSpectators != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TvSpectators);
            }
            if (TvTime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TvTime);
            }
            if (TvWatchPassword.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(TvWatchPassword);
            }
            if (ClDecryptdataKey != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClDecryptdataKey);
            }
            if (ClDecryptdataKeyPub != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClDecryptdataKeyPub);
            }
            if (GameType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameType);
            }
            if (GameMapgroup.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameMapgroup);
            }
            if (GameMap.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GameMap);
            }
            if (ServerId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerId);
            }
            if (MatchId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
            }
            if (ReservationId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReservationId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WatchableMatchInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ServerIp != 0)
            {
                ServerIp = other.ServerIp;
            }
            if (other.TvPort != 0)
            {
                TvPort = other.TvPort;
            }
            if (other.TvSpectators != 0)
            {
                TvSpectators = other.TvSpectators;
            }
            if (other.TvTime != 0)
            {
                TvTime = other.TvTime;
            }
            if (other.TvWatchPassword.Length != 0)
            {
                TvWatchPassword = other.TvWatchPassword;
            }
            if (other.ClDecryptdataKey != 0UL)
            {
                ClDecryptdataKey = other.ClDecryptdataKey;
            }
            if (other.ClDecryptdataKeyPub != 0UL)
            {
                ClDecryptdataKeyPub = other.ClDecryptdataKeyPub;
            }
            if (other.GameType != 0)
            {
                GameType = other.GameType;
            }
            if (other.GameMapgroup.Length != 0)
            {
                GameMapgroup = other.GameMapgroup;
            }
            if (other.GameMap.Length != 0)
            {
                GameMap = other.GameMap;
            }
            if (other.ServerId != 0UL)
            {
                ServerId = other.ServerId;
            }
            if (other.MatchId != 0UL)
            {
                MatchId = other.MatchId;
            }
            if (other.ReservationId != 0UL)
            {
                ReservationId = other.ReservationId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        ServerIp = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        TvPort = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        TvSpectators = input.ReadUInt32();
                        break;
                    }
                    case 32:
                    {
                        TvTime = input.ReadUInt32();
                        break;
                    }
                    case 42:
                    {
                        TvWatchPassword = input.ReadBytes();
                        break;
                    }
                    case 48:
                    {
                        ClDecryptdataKey = input.ReadUInt64();
                        break;
                    }
                    case 56:
                    {
                        ClDecryptdataKeyPub = input.ReadUInt64();
                        break;
                    }
                    case 64:
                    {
                        GameType = input.ReadUInt32();
                        break;
                    }
                    case 74:
                    {
                        GameMapgroup = input.ReadString();
                        break;
                    }
                    case 82:
                    {
                        GameMap = input.ReadString();
                        break;
                    }
                    case 88:
                    {
                        ServerId = input.ReadUInt64();
                        break;
                    }
                    case 96:
                    {
                        MatchId = input.ReadUInt64();
                        break;
                    }
                    case 104:
                    {
                        ReservationId = input.ReadUInt64();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CMsgGCCStrike15_v2_MatchmakingServerRoundStats : pb::IMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>
    {
        private static readonly pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingServerRoundStats> _parser = new pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(() => new CMsgGCCStrike15_v2_MatchmakingServerRoundStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingServerRoundStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingServerRoundStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingServerRoundStats(CMsgGCCStrike15_v2_MatchmakingServerRoundStats other) : this()
        {
            reservationid_ = other.reservationid_;
            Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
            map_ = other.map_;
            round_ = other.round_;
            kills_ = other.kills_.Clone();
            assists_ = other.assists_.Clone();
            deaths_ = other.deaths_.Clone();
            scores_ = other.scores_.Clone();
            pings_ = other.pings_.Clone();
            roundResult_ = other.roundResult_;
            matchResult_ = other.matchResult_;
            teamScores_ = other.teamScores_.Clone();
            Confirm = other.confirm_ != null ? other.Confirm.Clone() : null;
            reservationStage_ = other.reservationStage_;
            matchDuration_ = other.matchDuration_;
            enemyKills_ = other.enemyKills_.Clone();
            enemyHeadshots_ = other.enemyHeadshots_.Clone();
            enemy3Ks_ = other.enemy3Ks_.Clone();
            enemy4Ks_ = other.enemy4Ks_.Clone();
            enemy5Ks_ = other.enemy5Ks_.Clone();
            mvps_ = other.mvps_.Clone();
            spectatorsCount_ = other.spectatorsCount_;
            spectatorsCountTv_ = other.spectatorsCountTv_;
            spectatorsCountLnk_ = other.spectatorsCountLnk_;
            enemyKillsAgg_ = other.enemyKillsAgg_.Clone();
            DropInfo = other.dropInfo_ != null ? other.DropInfo.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingServerRoundStats Clone()
        {
            return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats(this);
        }

        /// <summary>Field number for the "reservationid" field.</summary>
        public const int ReservationidFieldNumber = 1;
        private ulong reservationid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Reservationid
        {
            get { return reservationid_; }
            set
            {
                reservationid_ = value;
            }
        }

        /// <summary>Field number for the "reservation" field.</summary>
        public const int ReservationFieldNumber = 2;
        private global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation
        {
            get { return reservation_; }
            set
            {
                reservation_ = value;
            }
        }

        /// <summary>Field number for the "map" field.</summary>
        public const int MapFieldNumber = 3;
        private string map_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Map
        {
            get { return map_; }
            set
            {
                map_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "round" field.</summary>
        public const int RoundFieldNumber = 4;
        private int round_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Round
        {
            get { return round_; }
            set
            {
                round_ = value;
            }
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_kills_codec
            = pb::FieldCodec.ForInt32(40);
        private readonly pbc::RepeatedField<int> kills_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Kills
        {
            get { return kills_; }
        }

        /// <summary>Field number for the "assists" field.</summary>
        public const int AssistsFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_assists_codec
            = pb::FieldCodec.ForInt32(48);
        private readonly pbc::RepeatedField<int> assists_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Assists
        {
            get { return assists_; }
        }

        /// <summary>Field number for the "deaths" field.</summary>
        public const int DeathsFieldNumber = 7;
        private static readonly pb::FieldCodec<int> _repeated_deaths_codec
            = pb::FieldCodec.ForInt32(56);
        private readonly pbc::RepeatedField<int> deaths_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Deaths
        {
            get { return deaths_; }
        }

        /// <summary>Field number for the "scores" field.</summary>
        public const int ScoresFieldNumber = 8;
        private static readonly pb::FieldCodec<int> _repeated_scores_codec
            = pb::FieldCodec.ForInt32(64);
        private readonly pbc::RepeatedField<int> scores_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Scores
        {
            get { return scores_; }
        }

        /// <summary>Field number for the "pings" field.</summary>
        public const int PingsFieldNumber = 9;
        private static readonly pb::FieldCodec<int> _repeated_pings_codec
            = pb::FieldCodec.ForInt32(72);
        private readonly pbc::RepeatedField<int> pings_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Pings
        {
            get { return pings_; }
        }

        /// <summary>Field number for the "round_result" field.</summary>
        public const int RoundResultFieldNumber = 10;
        private int roundResult_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RoundResult
        {
            get { return roundResult_; }
            set
            {
                roundResult_ = value;
            }
        }

        /// <summary>Field number for the "match_result" field.</summary>
        public const int MatchResultFieldNumber = 11;
        private int matchResult_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MatchResult
        {
            get { return matchResult_; }
            set
            {
                matchResult_ = value;
            }
        }

        /// <summary>Field number for the "team_scores" field.</summary>
        public const int TeamScoresFieldNumber = 12;
        private static readonly pb::FieldCodec<int> _repeated_teamScores_codec
            = pb::FieldCodec.ForInt32(96);
        private readonly pbc::RepeatedField<int> teamScores_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> TeamScores
        {
            get { return teamScores_; }
        }

        /// <summary>Field number for the "confirm" field.</summary>
        public const int ConfirmFieldNumber = 13;
        private global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Confirm
        {
            get { return confirm_; }
            set
            {
                confirm_ = value;
            }
        }

        /// <summary>Field number for the "reservation_stage" field.</summary>
        public const int ReservationStageFieldNumber = 14;
        private int reservationStage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReservationStage
        {
            get { return reservationStage_; }
            set
            {
                reservationStage_ = value;
            }
        }

        /// <summary>Field number for the "match_duration" field.</summary>
        public const int MatchDurationFieldNumber = 15;
        private int matchDuration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MatchDuration
        {
            get { return matchDuration_; }
            set
            {
                matchDuration_ = value;
            }
        }

        /// <summary>Field number for the "enemy_kills" field.</summary>
        public const int EnemyKillsFieldNumber = 16;
        private static readonly pb::FieldCodec<int> _repeated_enemyKills_codec
            = pb::FieldCodec.ForInt32(128);
        private readonly pbc::RepeatedField<int> enemyKills_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> EnemyKills
        {
            get { return enemyKills_; }
        }

        /// <summary>Field number for the "enemy_headshots" field.</summary>
        public const int EnemyHeadshotsFieldNumber = 17;
        private static readonly pb::FieldCodec<int> _repeated_enemyHeadshots_codec
            = pb::FieldCodec.ForInt32(136);
        private readonly pbc::RepeatedField<int> enemyHeadshots_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> EnemyHeadshots
        {
            get { return enemyHeadshots_; }
        }

        /// <summary>Field number for the "enemy_3ks" field.</summary>
        public const int Enemy3KsFieldNumber = 18;
        private static readonly pb::FieldCodec<int> _repeated_enemy3Ks_codec
            = pb::FieldCodec.ForInt32(144);
        private readonly pbc::RepeatedField<int> enemy3Ks_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Enemy3Ks
        {
            get { return enemy3Ks_; }
        }

        /// <summary>Field number for the "enemy_4ks" field.</summary>
        public const int Enemy4KsFieldNumber = 19;
        private static readonly pb::FieldCodec<int> _repeated_enemy4Ks_codec
            = pb::FieldCodec.ForInt32(152);
        private readonly pbc::RepeatedField<int> enemy4Ks_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Enemy4Ks
        {
            get { return enemy4Ks_; }
        }

        /// <summary>Field number for the "enemy_5ks" field.</summary>
        public const int Enemy5KsFieldNumber = 20;
        private static readonly pb::FieldCodec<int> _repeated_enemy5Ks_codec
            = pb::FieldCodec.ForInt32(160);
        private readonly pbc::RepeatedField<int> enemy5Ks_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Enemy5Ks
        {
            get { return enemy5Ks_; }
        }

        /// <summary>Field number for the "mvps" field.</summary>
        public const int MvpsFieldNumber = 21;
        private static readonly pb::FieldCodec<int> _repeated_mvps_codec
            = pb::FieldCodec.ForInt32(168);
        private readonly pbc::RepeatedField<int> mvps_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Mvps
        {
            get { return mvps_; }
        }

        /// <summary>Field number for the "spectators_count" field.</summary>
        public const int SpectatorsCountFieldNumber = 22;
        private uint spectatorsCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SpectatorsCount
        {
            get { return spectatorsCount_; }
            set
            {
                spectatorsCount_ = value;
            }
        }

        /// <summary>Field number for the "spectators_count_tv" field.</summary>
        public const int SpectatorsCountTvFieldNumber = 23;
        private uint spectatorsCountTv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SpectatorsCountTv
        {
            get { return spectatorsCountTv_; }
            set
            {
                spectatorsCountTv_ = value;
            }
        }

        /// <summary>Field number for the "spectators_count_lnk" field.</summary>
        public const int SpectatorsCountLnkFieldNumber = 24;
        private uint spectatorsCountLnk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SpectatorsCountLnk
        {
            get { return spectatorsCountLnk_; }
            set
            {
                spectatorsCountLnk_ = value;
            }
        }

        /// <summary>Field number for the "enemy_kills_agg" field.</summary>
        public const int EnemyKillsAggFieldNumber = 25;
        private static readonly pb::FieldCodec<int> _repeated_enemyKillsAgg_codec
            = pb::FieldCodec.ForInt32(200);
        private readonly pbc::RepeatedField<int> enemyKillsAgg_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> EnemyKillsAgg
        {
            get { return enemyKillsAgg_; }
        }

        /// <summary>Field number for the "drop_info" field.</summary>
        public const int DropInfoFieldNumber = 26;
        private global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo dropInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo DropInfo
        {
            get { return dropInfo_; }
            set
            {
                dropInfo_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CMsgGCCStrike15_v2_MatchmakingServerRoundStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMsgGCCStrike15_v2_MatchmakingServerRoundStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Reservationid != other.Reservationid) return false;
            if (!object.Equals(Reservation, other.Reservation)) return false;
            if (Map != other.Map) return false;
            if (Round != other.Round) return false;
            if (!kills_.Equals(other.kills_)) return false;
            if (!assists_.Equals(other.assists_)) return false;
            if (!deaths_.Equals(other.deaths_)) return false;
            if (!scores_.Equals(other.scores_)) return false;
            if (!pings_.Equals(other.pings_)) return false;
            if (RoundResult != other.RoundResult) return false;
            if (MatchResult != other.MatchResult) return false;
            if (!teamScores_.Equals(other.teamScores_)) return false;
            if (!object.Equals(Confirm, other.Confirm)) return false;
            if (ReservationStage != other.ReservationStage) return false;
            if (MatchDuration != other.MatchDuration) return false;
            if (!enemyKills_.Equals(other.enemyKills_)) return false;
            if (!enemyHeadshots_.Equals(other.enemyHeadshots_)) return false;
            if (!enemy3Ks_.Equals(other.enemy3Ks_)) return false;
            if (!enemy4Ks_.Equals(other.enemy4Ks_)) return false;
            if (!enemy5Ks_.Equals(other.enemy5Ks_)) return false;
            if (!mvps_.Equals(other.mvps_)) return false;
            if (SpectatorsCount != other.SpectatorsCount) return false;
            if (SpectatorsCountTv != other.SpectatorsCountTv) return false;
            if (SpectatorsCountLnk != other.SpectatorsCountLnk) return false;
            if (!enemyKillsAgg_.Equals(other.enemyKillsAgg_)) return false;
            if (!object.Equals(DropInfo, other.DropInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Reservationid != 0UL) hash ^= Reservationid.GetHashCode();
            if (reservation_ != null) hash ^= Reservation.GetHashCode();
            if (Map.Length != 0) hash ^= Map.GetHashCode();
            if (Round != 0) hash ^= Round.GetHashCode();
            hash ^= kills_.GetHashCode();
            hash ^= assists_.GetHashCode();
            hash ^= deaths_.GetHashCode();
            hash ^= scores_.GetHashCode();
            hash ^= pings_.GetHashCode();
            if (RoundResult != 0) hash ^= RoundResult.GetHashCode();
            if (MatchResult != 0) hash ^= MatchResult.GetHashCode();
            hash ^= teamScores_.GetHashCode();
            if (confirm_ != null) hash ^= Confirm.GetHashCode();
            if (ReservationStage != 0) hash ^= ReservationStage.GetHashCode();
            if (MatchDuration != 0) hash ^= MatchDuration.GetHashCode();
            hash ^= enemyKills_.GetHashCode();
            hash ^= enemyHeadshots_.GetHashCode();
            hash ^= enemy3Ks_.GetHashCode();
            hash ^= enemy4Ks_.GetHashCode();
            hash ^= enemy5Ks_.GetHashCode();
            hash ^= mvps_.GetHashCode();
            if (SpectatorsCount != 0) hash ^= SpectatorsCount.GetHashCode();
            if (SpectatorsCountTv != 0) hash ^= SpectatorsCountTv.GetHashCode();
            if (SpectatorsCountLnk != 0) hash ^= SpectatorsCountLnk.GetHashCode();
            hash ^= enemyKillsAgg_.GetHashCode();
            if (dropInfo_ != null) hash ^= DropInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Reservationid != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(Reservationid);
            }
            if (reservation_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Reservation);
            }
            if (Map.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Map);
            }
            if (Round != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Round);
            }
            kills_.WriteTo(output, _repeated_kills_codec);
            assists_.WriteTo(output, _repeated_assists_codec);
            deaths_.WriteTo(output, _repeated_deaths_codec);
            scores_.WriteTo(output, _repeated_scores_codec);
            pings_.WriteTo(output, _repeated_pings_codec);
            if (RoundResult != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(RoundResult);
            }
            if (MatchResult != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(MatchResult);
            }
            teamScores_.WriteTo(output, _repeated_teamScores_codec);
            if (confirm_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(Confirm);
            }
            if (ReservationStage != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(ReservationStage);
            }
            if (MatchDuration != 0)
            {
                output.WriteRawTag(120);
                output.WriteInt32(MatchDuration);
            }
            enemyKills_.WriteTo(output, _repeated_enemyKills_codec);
            enemyHeadshots_.WriteTo(output, _repeated_enemyHeadshots_codec);
            enemy3Ks_.WriteTo(output, _repeated_enemy3Ks_codec);
            enemy4Ks_.WriteTo(output, _repeated_enemy4Ks_codec);
            enemy5Ks_.WriteTo(output, _repeated_enemy5Ks_codec);
            mvps_.WriteTo(output, _repeated_mvps_codec);
            if (SpectatorsCount != 0)
            {
                output.WriteRawTag(176, 1);
                output.WriteUInt32(SpectatorsCount);
            }
            if (SpectatorsCountTv != 0)
            {
                output.WriteRawTag(184, 1);
                output.WriteUInt32(SpectatorsCountTv);
            }
            if (SpectatorsCountLnk != 0)
            {
                output.WriteRawTag(192, 1);
                output.WriteUInt32(SpectatorsCountLnk);
            }
            enemyKillsAgg_.WriteTo(output, _repeated_enemyKillsAgg_codec);
            if (dropInfo_ != null)
            {
                output.WriteRawTag(210, 1);
                output.WriteMessage(DropInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Reservationid != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Reservationid);
            }
            if (reservation_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
            }
            if (Map.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Map);
            }
            if (Round != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
            }
            size += kills_.CalculateSize(_repeated_kills_codec);
            size += assists_.CalculateSize(_repeated_assists_codec);
            size += deaths_.CalculateSize(_repeated_deaths_codec);
            size += scores_.CalculateSize(_repeated_scores_codec);
            size += pings_.CalculateSize(_repeated_pings_codec);
            if (RoundResult != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundResult);
            }
            if (MatchResult != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchResult);
            }
            size += teamScores_.CalculateSize(_repeated_teamScores_codec);
            if (confirm_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Confirm);
            }
            if (ReservationStage != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReservationStage);
            }
            if (MatchDuration != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchDuration);
            }
            size += enemyKills_.CalculateSize(_repeated_enemyKills_codec);
            size += enemyHeadshots_.CalculateSize(_repeated_enemyHeadshots_codec);
            size += enemy3Ks_.CalculateSize(_repeated_enemy3Ks_codec);
            size += enemy4Ks_.CalculateSize(_repeated_enemy4Ks_codec);
            size += enemy5Ks_.CalculateSize(_repeated_enemy5Ks_codec);
            size += mvps_.CalculateSize(_repeated_mvps_codec);
            if (SpectatorsCount != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorsCount);
            }
            if (SpectatorsCountTv != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorsCountTv);
            }
            if (SpectatorsCountLnk != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorsCountLnk);
            }
            size += enemyKillsAgg_.CalculateSize(_repeated_enemyKillsAgg_codec);
            if (dropInfo_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMsgGCCStrike15_v2_MatchmakingServerRoundStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Reservationid != 0UL)
            {
                Reservationid = other.Reservationid;
            }
            if (other.reservation_ != null)
            {
                if (reservation_ == null)
                {
                    reservation_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
                }
                Reservation.MergeFrom(other.Reservation);
            }
            if (other.Map.Length != 0)
            {
                Map = other.Map;
            }
            if (other.Round != 0)
            {
                Round = other.Round;
            }
            kills_.Add(other.kills_);
            assists_.Add(other.assists_);
            deaths_.Add(other.deaths_);
            scores_.Add(other.scores_);
            pings_.Add(other.pings_);
            if (other.RoundResult != 0)
            {
                RoundResult = other.RoundResult;
            }
            if (other.MatchResult != 0)
            {
                MatchResult = other.MatchResult;
            }
            teamScores_.Add(other.teamScores_);
            if (other.confirm_ != null)
            {
                if (confirm_ == null)
                {
                    confirm_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
                }
                Confirm.MergeFrom(other.Confirm);
            }
            if (other.ReservationStage != 0)
            {
                ReservationStage = other.ReservationStage;
            }
            if (other.MatchDuration != 0)
            {
                MatchDuration = other.MatchDuration;
            }
            enemyKills_.Add(other.enemyKills_);
            enemyHeadshots_.Add(other.enemyHeadshots_);
            enemy3Ks_.Add(other.enemy3Ks_);
            enemy4Ks_.Add(other.enemy4Ks_);
            enemy5Ks_.Add(other.enemy5Ks_);
            mvps_.Add(other.mvps_);
            if (other.SpectatorsCount != 0)
            {
                SpectatorsCount = other.SpectatorsCount;
            }
            if (other.SpectatorsCountTv != 0)
            {
                SpectatorsCountTv = other.SpectatorsCountTv;
            }
            if (other.SpectatorsCountLnk != 0)
            {
                SpectatorsCountLnk = other.SpectatorsCountLnk;
            }
            enemyKillsAgg_.Add(other.enemyKillsAgg_);
            if (other.dropInfo_ != null)
            {
                if (dropInfo_ == null)
                {
                    dropInfo_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo();
                }
                DropInfo.MergeFrom(other.DropInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Reservationid = input.ReadUInt64();
                        break;
                    }
                    case 18:
                    {
                        if (reservation_ == null)
                        {
                            reservation_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
                        }
                        input.ReadMessage(reservation_);
                        break;
                    }
                    case 26:
                    {
                        Map = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        Round = input.ReadInt32();
                        break;
                    }
                    case 42:
                    case 40:
                    {
                        kills_.AddEntriesFrom(input, _repeated_kills_codec);
                        break;
                    }
                    case 50:
                    case 48:
                    {
                        assists_.AddEntriesFrom(input, _repeated_assists_codec);
                        break;
                    }
                    case 58:
                    case 56:
                    {
                        deaths_.AddEntriesFrom(input, _repeated_deaths_codec);
                        break;
                    }
                    case 66:
                    case 64:
                    {
                        scores_.AddEntriesFrom(input, _repeated_scores_codec);
                        break;
                    }
                    case 74:
                    case 72:
                    {
                        pings_.AddEntriesFrom(input, _repeated_pings_codec);
                        break;
                    }
                    case 80:
                    {
                        RoundResult = input.ReadInt32();
                        break;
                    }
                    case 88:
                    {
                        MatchResult = input.ReadInt32();
                        break;
                    }
                    case 98:
                    case 96:
                    {
                        teamScores_.AddEntriesFrom(input, _repeated_teamScores_codec);
                        break;
                    }
                    case 106:
                    {
                        if (confirm_ == null)
                        {
                            confirm_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
                        }
                        input.ReadMessage(confirm_);
                        break;
                    }
                    case 112:
                    {
                        ReservationStage = input.ReadInt32();
                        break;
                    }
                    case 120:
                    {
                        MatchDuration = input.ReadInt32();
                        break;
                    }
                    case 130:
                    case 128:
                    {
                        enemyKills_.AddEntriesFrom(input, _repeated_enemyKills_codec);
                        break;
                    }
                    case 138:
                    case 136:
                    {
                        enemyHeadshots_.AddEntriesFrom(input, _repeated_enemyHeadshots_codec);
                        break;
                    }
                    case 146:
                    case 144:
                    {
                        enemy3Ks_.AddEntriesFrom(input, _repeated_enemy3Ks_codec);
                        break;
                    }
                    case 154:
                    case 152:
                    {
                        enemy4Ks_.AddEntriesFrom(input, _repeated_enemy4Ks_codec);
                        break;
                    }
                    case 162:
                    case 160:
                    {
                        enemy5Ks_.AddEntriesFrom(input, _repeated_enemy5Ks_codec);
                        break;
                    }
                    case 170:
                    case 168:
                    {
                        mvps_.AddEntriesFrom(input, _repeated_mvps_codec);
                        break;
                    }
                    case 176:
                    {
                        SpectatorsCount = input.ReadUInt32();
                        break;
                    }
                    case 184:
                    {
                        SpectatorsCountTv = input.ReadUInt32();
                        break;
                    }
                    case 192:
                    {
                        SpectatorsCountLnk = input.ReadUInt32();
                        break;
                    }
                    case 202:
                    case 200:
                    {
                        enemyKillsAgg_.AddEntriesFrom(input, _repeated_enemyKillsAgg_codec);
                        break;
                    }
                    case 210:
                    {
                        if (dropInfo_ == null)
                        {
                            dropInfo_ = new global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Types.DropInfo();
                        }
                        input.ReadMessage(dropInfo_);
                        break;
                    }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CMsgGCCStrike15_v2_MatchmakingServerRoundStats message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class DropInfo : pb::IMessage<DropInfo>
            {
                private static readonly pb::MessageParser<DropInfo> _parser = new pb::MessageParser<DropInfo>(() => new DropInfo());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DropInfo> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::RyaUploaderV2.ProtoBufs.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DropInfo()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DropInfo(DropInfo other) : this()
                {
                    accountMvp_ = other.accountMvp_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DropInfo Clone()
                {
                    return new DropInfo(this);
                }

                /// <summary>Field number for the "account_mvp" field.</summary>
                public const int AccountMvpFieldNumber = 1;
                private uint accountMvp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint AccountMvp
                {
                    get { return accountMvp_; }
                    set
                    {
                        accountMvp_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DropInfo);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DropInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (AccountMvp != other.AccountMvp) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (AccountMvp != 0) hash ^= AccountMvp.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (AccountMvp != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(AccountMvp);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (AccountMvp != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountMvp);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DropInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.AccountMvp != 0)
                    {
                        AccountMvp = other.AccountMvp;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                            {
                                AccountMvp = input.ReadUInt32();
                                break;
                            }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve : pb::IMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>
    {
        private static readonly pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve> _parser = new pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(() => new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve other) : this()
        {
            accountIds_ = other.accountIds_.Clone();
            gameType_ = other.gameType_;
            matchId_ = other.matchId_;
            serverVersion_ = other.serverVersion_;
            rankings_ = other.rankings_.Clone();
            encryptionKey_ = other.encryptionKey_;
            encryptionKeyPub_ = other.encryptionKeyPub_;
            partyIds_ = other.partyIds_.Clone();
            whitelist_ = other.whitelist_.Clone();
            tvMasterSteamid_ = other.tvMasterSteamid_;
            TournamentEvent = other.tournamentEvent_ != null ? other.TournamentEvent.Clone() : null;
            tournamentTeams_ = other.tournamentTeams_.Clone();
            tournamentCastersAccountIds_ = other.tournamentCastersAccountIds_.Clone();
            tvRelaySteamid_ = other.tvRelaySteamid_;
            PreMatchData = other.preMatchData_ != null ? other.PreMatchData.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Clone()
        {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(this);
        }

        /// <summary>Field number for the "account_ids" field.</summary>
        public const int AccountIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_accountIds_codec
            = pb::FieldCodec.ForUInt32(8);
        private readonly pbc::RepeatedField<uint> accountIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> AccountIds
        {
            get { return accountIds_; }
        }

        /// <summary>Field number for the "game_type" field.</summary>
        public const int GameTypeFieldNumber = 2;
        private uint gameType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GameType
        {
            get { return gameType_; }
            set
            {
                gameType_ = value;
            }
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 3;
        private ulong matchId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MatchId
        {
            get { return matchId_; }
            set
            {
                matchId_ = value;
            }
        }

        /// <summary>Field number for the "server_version" field.</summary>
        public const int ServerVersionFieldNumber = 4;
        private uint serverVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ServerVersion
        {
            get { return serverVersion_; }
            set
            {
                serverVersion_ = value;
            }
        }

        /// <summary>Field number for the "rankings" field.</summary>
        public const int RankingsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo> _repeated_rankings_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo> rankings_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.PlayerRankingInfo> Rankings
        {
            get { return rankings_; }
        }

        /// <summary>Field number for the "encryption_key" field.</summary>
        public const int EncryptionKeyFieldNumber = 6;
        private ulong encryptionKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EncryptionKey
        {
            get { return encryptionKey_; }
            set
            {
                encryptionKey_ = value;
            }
        }

        /// <summary>Field number for the "encryption_key_pub" field.</summary>
        public const int EncryptionKeyPubFieldNumber = 7;
        private ulong encryptionKeyPub_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EncryptionKeyPub
        {
            get { return encryptionKeyPub_; }
            set
            {
                encryptionKeyPub_ = value;
            }
        }

        /// <summary>Field number for the "party_ids" field.</summary>
        public const int PartyIdsFieldNumber = 8;
        private static readonly pb::FieldCodec<uint> _repeated_partyIds_codec
            = pb::FieldCodec.ForUInt32(64);
        private readonly pbc::RepeatedField<uint> partyIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> PartyIds
        {
            get { return partyIds_; }
        }

        /// <summary>Field number for the "whitelist" field.</summary>
        public const int WhitelistFieldNumber = 9;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.IpAddressMask> _repeated_whitelist_codec
            = pb::FieldCodec.ForMessage(74, global::RyaUploaderV2.ProtoBufs.IpAddressMask.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.IpAddressMask> whitelist_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.IpAddressMask>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.IpAddressMask> Whitelist
        {
            get { return whitelist_; }
        }

        /// <summary>Field number for the "tv_master_steamid" field.</summary>
        public const int TvMasterSteamidFieldNumber = 10;
        private ulong tvMasterSteamid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TvMasterSteamid
        {
            get { return tvMasterSteamid_; }
            set
            {
                tvMasterSteamid_ = value;
            }
        }

        /// <summary>Field number for the "tournament_event" field.</summary>
        public const int TournamentEventFieldNumber = 11;
        private global::RyaUploaderV2.ProtoBufs.TournamentEvent tournamentEvent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.TournamentEvent TournamentEvent
        {
            get { return tournamentEvent_; }
            set
            {
                tournamentEvent_ = value;
            }
        }

        /// <summary>Field number for the "tournament_teams" field.</summary>
        public const int TournamentTeamsFieldNumber = 12;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.TournamentTeam> _repeated_tournamentTeams_codec
            = pb::FieldCodec.ForMessage(98, global::RyaUploaderV2.ProtoBufs.TournamentTeam.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> tournamentTeams_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> TournamentTeams
        {
            get { return tournamentTeams_; }
        }

        /// <summary>Field number for the "tournament_casters_account_ids" field.</summary>
        public const int TournamentCastersAccountIdsFieldNumber = 13;
        private static readonly pb::FieldCodec<uint> _repeated_tournamentCastersAccountIds_codec
            = pb::FieldCodec.ForUInt32(104);
        private readonly pbc::RepeatedField<uint> tournamentCastersAccountIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> TournamentCastersAccountIds
        {
            get { return tournamentCastersAccountIds_; }
        }

        /// <summary>Field number for the "tv_relay_steamid" field.</summary>
        public const int TvRelaySteamidFieldNumber = 14;
        private ulong tvRelaySteamid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TvRelaySteamid
        {
            get { return tvRelaySteamid_; }
            set
            {
                tvRelaySteamid_ = value;
            }
        }

        /// <summary>Field number for the "pre_match_data" field.</summary>
        public const int PreMatchDataFieldNumber = 15;
        private global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData preMatchData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData PreMatchData
        {
            get { return preMatchData_; }
            set
            {
                preMatchData_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!accountIds_.Equals(other.accountIds_)) return false;
            if (GameType != other.GameType) return false;
            if (MatchId != other.MatchId) return false;
            if (ServerVersion != other.ServerVersion) return false;
            if (!rankings_.Equals(other.rankings_)) return false;
            if (EncryptionKey != other.EncryptionKey) return false;
            if (EncryptionKeyPub != other.EncryptionKeyPub) return false;
            if (!partyIds_.Equals(other.partyIds_)) return false;
            if (!whitelist_.Equals(other.whitelist_)) return false;
            if (TvMasterSteamid != other.TvMasterSteamid) return false;
            if (!object.Equals(TournamentEvent, other.TournamentEvent)) return false;
            if (!tournamentTeams_.Equals(other.tournamentTeams_)) return false;
            if (!tournamentCastersAccountIds_.Equals(other.tournamentCastersAccountIds_)) return false;
            if (TvRelaySteamid != other.TvRelaySteamid) return false;
            if (!object.Equals(PreMatchData, other.PreMatchData)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= accountIds_.GetHashCode();
            if (GameType != 0) hash ^= GameType.GetHashCode();
            if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
            if (ServerVersion != 0) hash ^= ServerVersion.GetHashCode();
            hash ^= rankings_.GetHashCode();
            if (EncryptionKey != 0UL) hash ^= EncryptionKey.GetHashCode();
            if (EncryptionKeyPub != 0UL) hash ^= EncryptionKeyPub.GetHashCode();
            hash ^= partyIds_.GetHashCode();
            hash ^= whitelist_.GetHashCode();
            if (TvMasterSteamid != 0UL) hash ^= TvMasterSteamid.GetHashCode();
            if (tournamentEvent_ != null) hash ^= TournamentEvent.GetHashCode();
            hash ^= tournamentTeams_.GetHashCode();
            hash ^= tournamentCastersAccountIds_.GetHashCode();
            if (TvRelaySteamid != 0UL) hash ^= TvRelaySteamid.GetHashCode();
            if (preMatchData_ != null) hash ^= PreMatchData.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            accountIds_.WriteTo(output, _repeated_accountIds_codec);
            if (GameType != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(GameType);
            }
            if (MatchId != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(MatchId);
            }
            if (ServerVersion != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ServerVersion);
            }
            rankings_.WriteTo(output, _repeated_rankings_codec);
            if (EncryptionKey != 0UL)
            {
                output.WriteRawTag(48);
                output.WriteUInt64(EncryptionKey);
            }
            if (EncryptionKeyPub != 0UL)
            {
                output.WriteRawTag(56);
                output.WriteUInt64(EncryptionKeyPub);
            }
            partyIds_.WriteTo(output, _repeated_partyIds_codec);
            whitelist_.WriteTo(output, _repeated_whitelist_codec);
            if (TvMasterSteamid != 0UL)
            {
                output.WriteRawTag(80);
                output.WriteUInt64(TvMasterSteamid);
            }
            if (tournamentEvent_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(TournamentEvent);
            }
            tournamentTeams_.WriteTo(output, _repeated_tournamentTeams_codec);
            tournamentCastersAccountIds_.WriteTo(output, _repeated_tournamentCastersAccountIds_codec);
            if (TvRelaySteamid != 0UL)
            {
                output.WriteRawTag(112);
                output.WriteUInt64(TvRelaySteamid);
            }
            if (preMatchData_ != null)
            {
                output.WriteRawTag(122);
                output.WriteMessage(PreMatchData);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += accountIds_.CalculateSize(_repeated_accountIds_codec);
            if (GameType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameType);
            }
            if (MatchId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
            }
            if (ServerVersion != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerVersion);
            }
            size += rankings_.CalculateSize(_repeated_rankings_codec);
            if (EncryptionKey != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncryptionKey);
            }
            if (EncryptionKeyPub != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncryptionKeyPub);
            }
            size += partyIds_.CalculateSize(_repeated_partyIds_codec);
            size += whitelist_.CalculateSize(_repeated_whitelist_codec);
            if (TvMasterSteamid != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TvMasterSteamid);
            }
            if (tournamentEvent_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TournamentEvent);
            }
            size += tournamentTeams_.CalculateSize(_repeated_tournamentTeams_codec);
            size += tournamentCastersAccountIds_.CalculateSize(_repeated_tournamentCastersAccountIds_codec);
            if (TvRelaySteamid != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TvRelaySteamid);
            }
            if (preMatchData_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreMatchData);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve other)
        {
            if (other == null)
            {
                return;
            }
            accountIds_.Add(other.accountIds_);
            if (other.GameType != 0)
            {
                GameType = other.GameType;
            }
            if (other.MatchId != 0UL)
            {
                MatchId = other.MatchId;
            }
            if (other.ServerVersion != 0)
            {
                ServerVersion = other.ServerVersion;
            }
            rankings_.Add(other.rankings_);
            if (other.EncryptionKey != 0UL)
            {
                EncryptionKey = other.EncryptionKey;
            }
            if (other.EncryptionKeyPub != 0UL)
            {
                EncryptionKeyPub = other.EncryptionKeyPub;
            }
            partyIds_.Add(other.partyIds_);
            whitelist_.Add(other.whitelist_);
            if (other.TvMasterSteamid != 0UL)
            {
                TvMasterSteamid = other.TvMasterSteamid;
            }
            if (other.tournamentEvent_ != null)
            {
                if (tournamentEvent_ == null)
                {
                    tournamentEvent_ = new global::RyaUploaderV2.ProtoBufs.TournamentEvent();
                }
                TournamentEvent.MergeFrom(other.TournamentEvent);
            }
            tournamentTeams_.Add(other.tournamentTeams_);
            tournamentCastersAccountIds_.Add(other.tournamentCastersAccountIds_);
            if (other.TvRelaySteamid != 0UL)
            {
                TvRelaySteamid = other.TvRelaySteamid;
            }
            if (other.preMatchData_ != null)
            {
                if (preMatchData_ == null)
                {
                    preMatchData_ = new global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData();
                }
                PreMatchData.MergeFrom(other.PreMatchData);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    case 8:
                    {
                        accountIds_.AddEntriesFrom(input, _repeated_accountIds_codec);
                        break;
                    }
                    case 16:
                    {
                        GameType = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        MatchId = input.ReadUInt64();
                        break;
                    }
                    case 32:
                    {
                        ServerVersion = input.ReadUInt32();
                        break;
                    }
                    case 42:
                    {
                        rankings_.AddEntriesFrom(input, _repeated_rankings_codec);
                        break;
                    }
                    case 48:
                    {
                        EncryptionKey = input.ReadUInt64();
                        break;
                    }
                    case 56:
                    {
                        EncryptionKeyPub = input.ReadUInt64();
                        break;
                    }
                    case 66:
                    case 64:
                    {
                        partyIds_.AddEntriesFrom(input, _repeated_partyIds_codec);
                        break;
                    }
                    case 74:
                    {
                        whitelist_.AddEntriesFrom(input, _repeated_whitelist_codec);
                        break;
                    }
                    case 80:
                    {
                        TvMasterSteamid = input.ReadUInt64();
                        break;
                    }
                    case 90:
                    {
                        if (tournamentEvent_ == null)
                        {
                            tournamentEvent_ = new global::RyaUploaderV2.ProtoBufs.TournamentEvent();
                        }
                        input.ReadMessage(tournamentEvent_);
                        break;
                    }
                    case 98:
                    {
                        tournamentTeams_.AddEntriesFrom(input, _repeated_tournamentTeams_codec);
                        break;
                    }
                    case 106:
                    case 104:
                    {
                        tournamentCastersAccountIds_.AddEntriesFrom(input, _repeated_tournamentCastersAccountIds_codec);
                        break;
                    }
                    case 112:
                    {
                        TvRelaySteamid = input.ReadUInt64();
                        break;
                    }
                    case 122:
                    {
                        if (preMatchData_ == null)
                        {
                            preMatchData_ = new global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData();
                        }
                        input.ReadMessage(preMatchData_);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class PlayerRankingInfo : pb::IMessage<PlayerRankingInfo>
    {
        private static readonly pb::MessageParser<PlayerRankingInfo> _parser = new pb::MessageParser<PlayerRankingInfo>(() => new PlayerRankingInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerRankingInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRankingInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRankingInfo(PlayerRankingInfo other) : this()
        {
            accountId_ = other.accountId_;
            rankId_ = other.rankId_;
            wins_ = other.wins_;
            rankChange_ = other.rankChange_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRankingInfo Clone()
        {
            return new PlayerRankingInfo(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId
        {
            get { return accountId_; }
            set
            {
                accountId_ = value;
            }
        }

        /// <summary>Field number for the "rank_id" field.</summary>
        public const int RankIdFieldNumber = 2;
        private uint rankId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RankId
        {
            get { return rankId_; }
            set
            {
                rankId_ = value;
            }
        }

        /// <summary>Field number for the "wins" field.</summary>
        public const int WinsFieldNumber = 3;
        private uint wins_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Wins
        {
            get { return wins_; }
            set
            {
                wins_ = value;
            }
        }

        /// <summary>Field number for the "rank_change" field.</summary>
        public const int RankChangeFieldNumber = 4;
        private float rankChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RankChange
        {
            get { return rankChange_; }
            set
            {
                rankChange_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlayerRankingInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerRankingInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AccountId != other.AccountId) return false;
            if (RankId != other.RankId) return false;
            if (Wins != other.Wins) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RankChange, other.RankChange)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AccountId != 0) hash ^= AccountId.GetHashCode();
            if (RankId != 0) hash ^= RankId.GetHashCode();
            if (Wins != 0) hash ^= Wins.GetHashCode();
            if (RankChange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RankChange);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AccountId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AccountId);
            }
            if (RankId != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(RankId);
            }
            if (Wins != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Wins);
            }
            if (RankChange != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(RankChange);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AccountId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
            }
            if (RankId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankId);
            }
            if (Wins != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wins);
            }
            if (RankChange != 0F)
            {
                size += 1 + 4;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerRankingInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AccountId != 0)
            {
                AccountId = other.AccountId;
            }
            if (other.RankId != 0)
            {
                RankId = other.RankId;
            }
            if (other.Wins != 0)
            {
                Wins = other.Wins;
            }
            if (other.RankChange != 0F)
            {
                RankChange = other.RankChange;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        AccountId = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        RankId = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        Wins = input.ReadUInt32();
                        break;
                    }
                    case 37:
                    {
                        RankChange = input.ReadFloat();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class IpAddressMask : pb::IMessage<IpAddressMask>
    {
        private static readonly pb::MessageParser<IpAddressMask> _parser = new pb::MessageParser<IpAddressMask>(() => new IpAddressMask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IpAddressMask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IpAddressMask()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IpAddressMask(IpAddressMask other) : this()
        {
            a_ = other.a_;
            b_ = other.b_;
            c_ = other.c_;
            d_ = other.d_;
            bits_ = other.bits_;
            token_ = other.token_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IpAddressMask Clone()
        {
            return new IpAddressMask(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private uint a_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint A
        {
            get { return a_; }
            set
            {
                a_ = value;
            }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private uint b_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint B
        {
            get { return b_; }
            set
            {
                b_ = value;
            }
        }

        /// <summary>Field number for the "c" field.</summary>
        public const int CFieldNumber = 3;
        private uint c_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint C
        {
            get { return c_; }
            set
            {
                c_ = value;
            }
        }

        /// <summary>Field number for the "d" field.</summary>
        public const int DFieldNumber = 4;
        private uint d_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint D
        {
            get { return d_; }
            set
            {
                d_ = value;
            }
        }

        /// <summary>Field number for the "bits" field.</summary>
        public const int BitsFieldNumber = 5;
        private uint bits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Bits
        {
            get { return bits_; }
            set
            {
                bits_ = value;
            }
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 6;
        private uint token_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Token
        {
            get { return token_; }
            set
            {
                token_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as IpAddressMask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IpAddressMask other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (A != other.A) return false;
            if (B != other.B) return false;
            if (C != other.C) return false;
            if (D != other.D) return false;
            if (Bits != other.Bits) return false;
            if (Token != other.Token) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (A != 0) hash ^= A.GetHashCode();
            if (B != 0) hash ^= B.GetHashCode();
            if (C != 0) hash ^= C.GetHashCode();
            if (D != 0) hash ^= D.GetHashCode();
            if (Bits != 0) hash ^= Bits.GetHashCode();
            if (Token != 0) hash ^= Token.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (A != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(A);
            }
            if (B != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(B);
            }
            if (C != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(C);
            }
            if (D != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(D);
            }
            if (Bits != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(Bits);
            }
            if (Token != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(Token);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (A != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
            }
            if (B != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
            }
            if (C != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(C);
            }
            if (D != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(D);
            }
            if (Bits != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bits);
            }
            if (Token != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IpAddressMask other)
        {
            if (other == null)
            {
                return;
            }
            if (other.A != 0)
            {
                A = other.A;
            }
            if (other.B != 0)
            {
                B = other.B;
            }
            if (other.C != 0)
            {
                C = other.C;
            }
            if (other.D != 0)
            {
                D = other.D;
            }
            if (other.Bits != 0)
            {
                Bits = other.Bits;
            }
            if (other.Token != 0)
            {
                Token = other.Token;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        A = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        B = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        C = input.ReadUInt32();
                        break;
                    }
                    case 32:
                    {
                        D = input.ReadUInt32();
                        break;
                    }
                    case 40:
                    {
                        Bits = input.ReadUInt32();
                        break;
                    }
                    case 48:
                    {
                        Token = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class TournamentEvent : pb::IMessage<TournamentEvent>
    {
        private static readonly pb::MessageParser<TournamentEvent> _parser = new pb::MessageParser<TournamentEvent>(() => new TournamentEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TournamentEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentEvent(TournamentEvent other) : this()
        {
            eventId_ = other.eventId_;
            eventTag_ = other.eventTag_;
            eventName_ = other.eventName_;
            eventTimeStart_ = other.eventTimeStart_;
            eventTimeEnd_ = other.eventTimeEnd_;
            eventPublic_ = other.eventPublic_;
            eventStageId_ = other.eventStageId_;
            eventStageName_ = other.eventStageName_;
            activeSectionId_ = other.activeSectionId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentEvent Clone()
        {
            return new TournamentEvent(this);
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 1;
        private int eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = value;
            }
        }

        /// <summary>Field number for the "event_tag" field.</summary>
        public const int EventTagFieldNumber = 2;
        private string eventTag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventTag
        {
            get { return eventTag_; }
            set
            {
                eventTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "event_name" field.</summary>
        public const int EventNameFieldNumber = 3;
        private string eventName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventName
        {
            get { return eventName_; }
            set
            {
                eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "event_time_start" field.</summary>
        public const int EventTimeStartFieldNumber = 4;
        private uint eventTimeStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventTimeStart
        {
            get { return eventTimeStart_; }
            set
            {
                eventTimeStart_ = value;
            }
        }

        /// <summary>Field number for the "event_time_end" field.</summary>
        public const int EventTimeEndFieldNumber = 5;
        private uint eventTimeEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EventTimeEnd
        {
            get { return eventTimeEnd_; }
            set
            {
                eventTimeEnd_ = value;
            }
        }

        /// <summary>Field number for the "event_public" field.</summary>
        public const int EventPublicFieldNumber = 6;
        private int eventPublic_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventPublic
        {
            get { return eventPublic_; }
            set
            {
                eventPublic_ = value;
            }
        }

        /// <summary>Field number for the "event_stage_id" field.</summary>
        public const int EventStageIdFieldNumber = 7;
        private int eventStageId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventStageId
        {
            get { return eventStageId_; }
            set
            {
                eventStageId_ = value;
            }
        }

        /// <summary>Field number for the "event_stage_name" field.</summary>
        public const int EventStageNameFieldNumber = 8;
        private string eventStageName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventStageName
        {
            get { return eventStageName_; }
            set
            {
                eventStageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "active_section_id" field.</summary>
        public const int ActiveSectionIdFieldNumber = 9;
        private uint activeSectionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActiveSectionId
        {
            get { return activeSectionId_; }
            set
            {
                activeSectionId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TournamentEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TournamentEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (EventTag != other.EventTag) return false;
            if (EventName != other.EventName) return false;
            if (EventTimeStart != other.EventTimeStart) return false;
            if (EventTimeEnd != other.EventTimeEnd) return false;
            if (EventPublic != other.EventPublic) return false;
            if (EventStageId != other.EventStageId) return false;
            if (EventStageName != other.EventStageName) return false;
            if (ActiveSectionId != other.ActiveSectionId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId != 0) hash ^= EventId.GetHashCode();
            if (EventTag.Length != 0) hash ^= EventTag.GetHashCode();
            if (EventName.Length != 0) hash ^= EventName.GetHashCode();
            if (EventTimeStart != 0) hash ^= EventTimeStart.GetHashCode();
            if (EventTimeEnd != 0) hash ^= EventTimeEnd.GetHashCode();
            if (EventPublic != 0) hash ^= EventPublic.GetHashCode();
            if (EventStageId != 0) hash ^= EventStageId.GetHashCode();
            if (EventStageName.Length != 0) hash ^= EventStageName.GetHashCode();
            if (ActiveSectionId != 0) hash ^= ActiveSectionId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(EventId);
            }
            if (EventTag.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(EventTag);
            }
            if (EventName.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(EventName);
            }
            if (EventTimeStart != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(EventTimeStart);
            }
            if (EventTimeEnd != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(EventTimeEnd);
            }
            if (EventPublic != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(EventPublic);
            }
            if (EventStageId != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(EventStageId);
            }
            if (EventStageName.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(EventStageName);
            }
            if (ActiveSectionId != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(ActiveSectionId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
            }
            if (EventTag.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventTag);
            }
            if (EventName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
            }
            if (EventTimeStart != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventTimeStart);
            }
            if (EventTimeEnd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventTimeEnd);
            }
            if (EventPublic != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventPublic);
            }
            if (EventStageId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStageId);
            }
            if (EventStageName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStageName);
            }
            if (ActiveSectionId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveSectionId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TournamentEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId != 0)
            {
                EventId = other.EventId;
            }
            if (other.EventTag.Length != 0)
            {
                EventTag = other.EventTag;
            }
            if (other.EventName.Length != 0)
            {
                EventName = other.EventName;
            }
            if (other.EventTimeStart != 0)
            {
                EventTimeStart = other.EventTimeStart;
            }
            if (other.EventTimeEnd != 0)
            {
                EventTimeEnd = other.EventTimeEnd;
            }
            if (other.EventPublic != 0)
            {
                EventPublic = other.EventPublic;
            }
            if (other.EventStageId != 0)
            {
                EventStageId = other.EventStageId;
            }
            if (other.EventStageName.Length != 0)
            {
                EventStageName = other.EventStageName;
            }
            if (other.ActiveSectionId != 0)
            {
                ActiveSectionId = other.ActiveSectionId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        EventId = input.ReadInt32();
                        break;
                    }
                    case 18:
                    {
                        EventTag = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        EventName = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        EventTimeStart = input.ReadUInt32();
                        break;
                    }
                    case 40:
                    {
                        EventTimeEnd = input.ReadUInt32();
                        break;
                    }
                    case 48:
                    {
                        EventPublic = input.ReadInt32();
                        break;
                    }
                    case 56:
                    {
                        EventStageId = input.ReadInt32();
                        break;
                    }
                    case 66:
                    {
                        EventStageName = input.ReadString();
                        break;
                    }
                    case 72:
                    {
                        ActiveSectionId = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CPreMatchInfoData : pb::IMessage<CPreMatchInfoData>
    {
        private static readonly pb::MessageParser<CPreMatchInfoData> _parser = new pb::MessageParser<CPreMatchInfoData>(() => new CPreMatchInfoData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CPreMatchInfoData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPreMatchInfoData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPreMatchInfoData(CPreMatchInfoData other) : this()
        {
            predictionsPct_ = other.predictionsPct_;
            Draft = other.draft_ != null ? other.Draft.Clone() : null;
            stats_ = other.stats_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CPreMatchInfoData Clone()
        {
            return new CPreMatchInfoData(this);
        }

        /// <summary>Field number for the "predictions_pct" field.</summary>
        public const int PredictionsPctFieldNumber = 1;
        private int predictionsPct_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PredictionsPct
        {
            get { return predictionsPct_; }
            set
            {
                predictionsPct_ = value;
            }
        }

        /// <summary>Field number for the "draft" field.</summary>
        public const int DraftFieldNumber = 4;
        private global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft draft_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft Draft
        {
            get { return draft_; }
            set
            {
                draft_ = value;
            }
        }

        /// <summary>Field number for the "stats" field.</summary>
        public const int StatsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats> _repeated_stats_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats> stats_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Types.TeamStats> Stats
        {
            get { return stats_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CPreMatchInfoData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CPreMatchInfoData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PredictionsPct != other.PredictionsPct) return false;
            if (!object.Equals(Draft, other.Draft)) return false;
            if (!stats_.Equals(other.stats_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PredictionsPct != 0) hash ^= PredictionsPct.GetHashCode();
            if (draft_ != null) hash ^= Draft.GetHashCode();
            hash ^= stats_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PredictionsPct != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(PredictionsPct);
            }
            if (draft_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Draft);
            }
            stats_.WriteTo(output, _repeated_stats_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PredictionsPct != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PredictionsPct);
            }
            if (draft_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Draft);
            }
            size += stats_.CalculateSize(_repeated_stats_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CPreMatchInfoData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PredictionsPct != 0)
            {
                PredictionsPct = other.PredictionsPct;
            }
            if (other.draft_ != null)
            {
                if (draft_ == null)
                {
                    draft_ = new global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft();
                }
                Draft.MergeFrom(other.Draft);
            }
            stats_.Add(other.stats_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        PredictionsPct = input.ReadInt32();
                        break;
                    }
                    case 34:
                    {
                        if (draft_ == null)
                        {
                            draft_ = new global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft();
                        }
                        input.ReadMessage(draft_);
                        break;
                    }
                    case 42:
                    {
                        stats_.AddEntriesFrom(input, _repeated_stats_codec);
                        break;
                    }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CPreMatchInfoData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class TeamStats : pb::IMessage<TeamStats>
            {
                private static readonly pb::MessageParser<TeamStats> _parser = new pb::MessageParser<TeamStats>(() => new TeamStats());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<TeamStats> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::RyaUploaderV2.ProtoBufs.CPreMatchInfoData.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TeamStats()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TeamStats(TeamStats other) : this()
                {
                    matchInfoIdxtxt_ = other.matchInfoIdxtxt_;
                    matchInfoTxt_ = other.matchInfoTxt_;
                    matchInfoTeams_ = other.matchInfoTeams_.Clone();
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TeamStats Clone()
                {
                    return new TeamStats(this);
                }

                /// <summary>Field number for the "match_info_idxtxt" field.</summary>
                public const int MatchInfoIdxtxtFieldNumber = 1;
                private int matchInfoIdxtxt_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int MatchInfoIdxtxt
                {
                    get { return matchInfoIdxtxt_; }
                    set
                    {
                        matchInfoIdxtxt_ = value;
                    }
                }

                /// <summary>Field number for the "match_info_txt" field.</summary>
                public const int MatchInfoTxtFieldNumber = 2;
                private string matchInfoTxt_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string MatchInfoTxt
                {
                    get { return matchInfoTxt_; }
                    set
                    {
                        matchInfoTxt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "match_info_teams" field.</summary>
                public const int MatchInfoTeamsFieldNumber = 3;
                private static readonly pb::FieldCodec<string> _repeated_matchInfoTeams_codec
                    = pb::FieldCodec.ForString(26);
                private readonly pbc::RepeatedField<string> matchInfoTeams_ = new pbc::RepeatedField<string>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> MatchInfoTeams
                {
                    get { return matchInfoTeams_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as TeamStats);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(TeamStats other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (MatchInfoIdxtxt != other.MatchInfoIdxtxt) return false;
                    if (MatchInfoTxt != other.MatchInfoTxt) return false;
                    if (!matchInfoTeams_.Equals(other.matchInfoTeams_)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (MatchInfoIdxtxt != 0) hash ^= MatchInfoIdxtxt.GetHashCode();
                    if (MatchInfoTxt.Length != 0) hash ^= MatchInfoTxt.GetHashCode();
                    hash ^= matchInfoTeams_.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (MatchInfoIdxtxt != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(MatchInfoIdxtxt);
                    }
                    if (MatchInfoTxt.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(MatchInfoTxt);
                    }
                    matchInfoTeams_.WriteTo(output, _repeated_matchInfoTeams_codec);
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (MatchInfoIdxtxt != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchInfoIdxtxt);
                    }
                    if (MatchInfoTxt.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchInfoTxt);
                    }
                    size += matchInfoTeams_.CalculateSize(_repeated_matchInfoTeams_codec);
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(TeamStats other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.MatchInfoIdxtxt != 0)
                    {
                        MatchInfoIdxtxt = other.MatchInfoIdxtxt;
                    }
                    if (other.MatchInfoTxt.Length != 0)
                    {
                        MatchInfoTxt = other.MatchInfoTxt;
                    }
                    matchInfoTeams_.Add(other.matchInfoTeams_);
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                            {
                                MatchInfoIdxtxt = input.ReadInt32();
                                break;
                            }
                            case 18:
                            {
                                MatchInfoTxt = input.ReadString();
                                break;
                            }
                            case 26:
                            {
                                matchInfoTeams_.AddEntriesFrom(input, _repeated_matchInfoTeams_codec);
                                break;
                            }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class CDataGCCStrike15_v2_TournamentMatchDraft : pb::IMessage<CDataGCCStrike15_v2_TournamentMatchDraft>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_TournamentMatchDraft> _parser = new pb::MessageParser<CDataGCCStrike15_v2_TournamentMatchDraft>(() => new CDataGCCStrike15_v2_TournamentMatchDraft());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_TournamentMatchDraft> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentMatchDraft()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentMatchDraft(CDataGCCStrike15_v2_TournamentMatchDraft other) : this()
        {
            eventId_ = other.eventId_;
            eventStageId_ = other.eventStageId_;
            teamId0_ = other.teamId0_;
            teamId1_ = other.teamId1_;
            mapsCount_ = other.mapsCount_;
            mapsCurrent_ = other.mapsCurrent_;
            teamIdStart_ = other.teamIdStart_;
            teamIdVeto1_ = other.teamIdVeto1_;
            teamIdPickn_ = other.teamIdPickn_;
            drafts_ = other.drafts_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentMatchDraft Clone()
        {
            return new CDataGCCStrike15_v2_TournamentMatchDraft(this);
        }

        /// <summary>Field number for the "event_id" field.</summary>
        public const int EventIdFieldNumber = 1;
        private int eventId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventId
        {
            get { return eventId_; }
            set
            {
                eventId_ = value;
            }
        }

        /// <summary>Field number for the "event_stage_id" field.</summary>
        public const int EventStageIdFieldNumber = 2;
        private int eventStageId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventStageId
        {
            get { return eventStageId_; }
            set
            {
                eventStageId_ = value;
            }
        }

        /// <summary>Field number for the "team_id_0" field.</summary>
        public const int TeamId0FieldNumber = 3;
        private int teamId0_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId0
        {
            get { return teamId0_; }
            set
            {
                teamId0_ = value;
            }
        }

        /// <summary>Field number for the "team_id_1" field.</summary>
        public const int TeamId1FieldNumber = 4;
        private int teamId1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId1
        {
            get { return teamId1_; }
            set
            {
                teamId1_ = value;
            }
        }

        /// <summary>Field number for the "maps_count" field.</summary>
        public const int MapsCountFieldNumber = 5;
        private int mapsCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapsCount
        {
            get { return mapsCount_; }
            set
            {
                mapsCount_ = value;
            }
        }

        /// <summary>Field number for the "maps_current" field.</summary>
        public const int MapsCurrentFieldNumber = 6;
        private int mapsCurrent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapsCurrent
        {
            get { return mapsCurrent_; }
            set
            {
                mapsCurrent_ = value;
            }
        }

        /// <summary>Field number for the "team_id_start" field.</summary>
        public const int TeamIdStartFieldNumber = 7;
        private int teamIdStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamIdStart
        {
            get { return teamIdStart_; }
            set
            {
                teamIdStart_ = value;
            }
        }

        /// <summary>Field number for the "team_id_veto1" field.</summary>
        public const int TeamIdVeto1FieldNumber = 8;
        private int teamIdVeto1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamIdVeto1
        {
            get { return teamIdVeto1_; }
            set
            {
                teamIdVeto1_ = value;
            }
        }

        /// <summary>Field number for the "team_id_pickn" field.</summary>
        public const int TeamIdPicknFieldNumber = 9;
        private int teamIdPickn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamIdPickn
        {
            get { return teamIdPickn_; }
            set
            {
                teamIdPickn_ = value;
            }
        }

        /// <summary>Field number for the "drafts" field.</summary>
        public const int DraftsFieldNumber = 10;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> _repeated_drafts_codec
            = pb::FieldCodec.ForMessage(82, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> drafts_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> Drafts
        {
            get { return drafts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_TournamentMatchDraft);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_TournamentMatchDraft other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventId != other.EventId) return false;
            if (EventStageId != other.EventStageId) return false;
            if (TeamId0 != other.TeamId0) return false;
            if (TeamId1 != other.TeamId1) return false;
            if (MapsCount != other.MapsCount) return false;
            if (MapsCurrent != other.MapsCurrent) return false;
            if (TeamIdStart != other.TeamIdStart) return false;
            if (TeamIdVeto1 != other.TeamIdVeto1) return false;
            if (TeamIdPickn != other.TeamIdPickn) return false;
            if (!drafts_.Equals(other.drafts_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventId != 0) hash ^= EventId.GetHashCode();
            if (EventStageId != 0) hash ^= EventStageId.GetHashCode();
            if (TeamId0 != 0) hash ^= TeamId0.GetHashCode();
            if (TeamId1 != 0) hash ^= TeamId1.GetHashCode();
            if (MapsCount != 0) hash ^= MapsCount.GetHashCode();
            if (MapsCurrent != 0) hash ^= MapsCurrent.GetHashCode();
            if (TeamIdStart != 0) hash ^= TeamIdStart.GetHashCode();
            if (TeamIdVeto1 != 0) hash ^= TeamIdVeto1.GetHashCode();
            if (TeamIdPickn != 0) hash ^= TeamIdPickn.GetHashCode();
            hash ^= drafts_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(EventId);
            }
            if (EventStageId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(EventStageId);
            }
            if (TeamId0 != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(TeamId0);
            }
            if (TeamId1 != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(TeamId1);
            }
            if (MapsCount != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(MapsCount);
            }
            if (MapsCurrent != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(MapsCurrent);
            }
            if (TeamIdStart != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(TeamIdStart);
            }
            if (TeamIdVeto1 != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(TeamIdVeto1);
            }
            if (TeamIdPickn != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(TeamIdPickn);
            }
            drafts_.WriteTo(output, _repeated_drafts_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
            }
            if (EventStageId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStageId);
            }
            if (TeamId0 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId0);
            }
            if (TeamId1 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId1);
            }
            if (MapsCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapsCount);
            }
            if (MapsCurrent != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapsCurrent);
            }
            if (TeamIdStart != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIdStart);
            }
            if (TeamIdVeto1 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIdVeto1);
            }
            if (TeamIdPickn != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIdPickn);
            }
            size += drafts_.CalculateSize(_repeated_drafts_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_TournamentMatchDraft other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventId != 0)
            {
                EventId = other.EventId;
            }
            if (other.EventStageId != 0)
            {
                EventStageId = other.EventStageId;
            }
            if (other.TeamId0 != 0)
            {
                TeamId0 = other.TeamId0;
            }
            if (other.TeamId1 != 0)
            {
                TeamId1 = other.TeamId1;
            }
            if (other.MapsCount != 0)
            {
                MapsCount = other.MapsCount;
            }
            if (other.MapsCurrent != 0)
            {
                MapsCurrent = other.MapsCurrent;
            }
            if (other.TeamIdStart != 0)
            {
                TeamIdStart = other.TeamIdStart;
            }
            if (other.TeamIdVeto1 != 0)
            {
                TeamIdVeto1 = other.TeamIdVeto1;
            }
            if (other.TeamIdPickn != 0)
            {
                TeamIdPickn = other.TeamIdPickn;
            }
            drafts_.Add(other.drafts_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        EventId = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        EventStageId = input.ReadInt32();
                        break;
                    }
                    case 24:
                    {
                        TeamId0 = input.ReadInt32();
                        break;
                    }
                    case 32:
                    {
                        TeamId1 = input.ReadInt32();
                        break;
                    }
                    case 40:
                    {
                        MapsCount = input.ReadInt32();
                        break;
                    }
                    case 48:
                    {
                        MapsCurrent = input.ReadInt32();
                        break;
                    }
                    case 56:
                    {
                        TeamIdStart = input.ReadInt32();
                        break;
                    }
                    case 64:
                    {
                        TeamIdVeto1 = input.ReadInt32();
                        break;
                    }
                    case 72:
                    {
                        TeamIdPickn = input.ReadInt32();
                        break;
                    }
                    case 82:
                    {
                        drafts_.AddEntriesFrom(input, _repeated_drafts_codec);
                        break;
                    }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CDataGCCStrike15_v2_TournamentMatchDraft message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Entry : pb::IMessage<Entry>
            {
                private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Entry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentMatchDraft.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry(Entry other) : this()
                {
                    mapid_ = other.mapid_;
                    teamIdCt_ = other.teamIdCt_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry Clone()
                {
                    return new Entry(this);
                }

                /// <summary>Field number for the "mapid" field.</summary>
                public const int MapidFieldNumber = 1;
                private int mapid_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Mapid
                {
                    get { return mapid_; }
                    set
                    {
                        mapid_ = value;
                    }
                }

                /// <summary>Field number for the "team_id_ct" field.</summary>
                public const int TeamIdCtFieldNumber = 2;
                private int teamIdCt_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int TeamIdCt
                {
                    get { return teamIdCt_; }
                    set
                    {
                        teamIdCt_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Entry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Entry other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Mapid != other.Mapid) return false;
                    if (TeamIdCt != other.TeamIdCt) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Mapid != 0) hash ^= Mapid.GetHashCode();
                    if (TeamIdCt != 0) hash ^= TeamIdCt.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Mapid != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(Mapid);
                    }
                    if (TeamIdCt != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(TeamIdCt);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Mapid != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
                    }
                    if (TeamIdCt != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIdCt);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Entry other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Mapid != 0)
                    {
                        Mapid = other.Mapid;
                    }
                    if (other.TeamIdCt != 0)
                    {
                        TeamIdCt = other.TeamIdCt;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                            {
                                Mapid = input.ReadInt32();
                                break;
                            }
                            case 16:
                            {
                                TeamIdCt = input.ReadInt32();
                                break;
                            }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm : pb::IMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>
    {
        private static readonly pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm> _parser = new pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(() => new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm other) : this()
        {
            token_ = other.token_;
            stamp_ = other.stamp_;
            exchange_ = other.exchange_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Clone()
        {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(this);
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 1;
        private uint token_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Token
        {
            get { return token_; }
            set
            {
                token_ = value;
            }
        }

        /// <summary>Field number for the "stamp" field.</summary>
        public const int StampFieldNumber = 2;
        private uint stamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stamp
        {
            get { return stamp_; }
            set
            {
                stamp_ = value;
            }
        }

        /// <summary>Field number for the "exchange" field.</summary>
        public const int ExchangeFieldNumber = 3;
        private ulong exchange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Exchange
        {
            get { return exchange_; }
            set
            {
                exchange_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Token != other.Token) return false;
            if (Stamp != other.Stamp) return false;
            if (Exchange != other.Exchange) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Token != 0) hash ^= Token.GetHashCode();
            if (Stamp != 0) hash ^= Stamp.GetHashCode();
            if (Exchange != 0UL) hash ^= Exchange.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Token != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Token);
            }
            if (Stamp != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Stamp);
            }
            if (Exchange != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(Exchange);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Token != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
            }
            if (Stamp != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stamp);
            }
            if (Exchange != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exchange);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Token != 0)
            {
                Token = other.Token;
            }
            if (other.Stamp != 0)
            {
                Stamp = other.Stamp;
            }
            if (other.Exchange != 0UL)
            {
                Exchange = other.Exchange;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Token = input.ReadUInt32();
                        break;
                    }
                    case 16:
                    {
                        Stamp = input.ReadUInt32();
                        break;
                    }
                    case 24:
                    {
                        Exchange = input.ReadUInt64();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class TournamentTeam : pb::IMessage<TournamentTeam>
    {
        private static readonly pb::MessageParser<TournamentTeam> _parser = new pb::MessageParser<TournamentTeam>(() => new TournamentTeam());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TournamentTeam> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentTeam()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentTeam(TournamentTeam other) : this()
        {
            teamId_ = other.teamId_;
            teamTag_ = other.teamTag_;
            teamFlag_ = other.teamFlag_;
            teamName_ = other.teamName_;
            players_ = other.players_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentTeam Clone()
        {
            return new TournamentTeam(this);
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 1;
        private int teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "team_tag" field.</summary>
        public const int TeamTagFieldNumber = 2;
        private string teamTag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamTag
        {
            get { return teamTag_; }
            set
            {
                teamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "team_flag" field.</summary>
        public const int TeamFlagFieldNumber = 3;
        private string teamFlag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamFlag
        {
            get { return teamFlag_; }
            set
            {
                teamFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "team_name" field.</summary>
        public const int TeamNameFieldNumber = 4;
        private string teamName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamName
        {
            get { return teamName_; }
            set
            {
                teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "players" field.</summary>
        public const int PlayersFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.TournamentPlayer> _repeated_players_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.TournamentPlayer.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentPlayer> players_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentPlayer>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentPlayer> Players
        {
            get { return players_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TournamentTeam);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TournamentTeam other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TeamId != other.TeamId) return false;
            if (TeamTag != other.TeamTag) return false;
            if (TeamFlag != other.TeamFlag) return false;
            if (TeamName != other.TeamName) return false;
            if (!players_.Equals(other.players_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (TeamTag.Length != 0) hash ^= TeamTag.GetHashCode();
            if (TeamFlag.Length != 0) hash ^= TeamFlag.GetHashCode();
            if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
            hash ^= players_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TeamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(TeamId);
            }
            if (TeamTag.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(TeamTag);
            }
            if (TeamFlag.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(TeamFlag);
            }
            if (TeamName.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(TeamName);
            }
            players_.WriteTo(output, _repeated_players_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (TeamTag.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamTag);
            }
            if (TeamFlag.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamFlag);
            }
            if (TeamName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
            }
            size += players_.CalculateSize(_repeated_players_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TournamentTeam other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.TeamTag.Length != 0)
            {
                TeamTag = other.TeamTag;
            }
            if (other.TeamFlag.Length != 0)
            {
                TeamFlag = other.TeamFlag;
            }
            if (other.TeamName.Length != 0)
            {
                TeamName = other.TeamName;
            }
            players_.Add(other.players_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        TeamId = input.ReadInt32();
                        break;
                    }
                    case 18:
                    {
                        TeamTag = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        TeamFlag = input.ReadString();
                        break;
                    }
                    case 34:
                    {
                        TeamName = input.ReadString();
                        break;
                    }
                    case 42:
                    {
                        players_.AddEntriesFrom(input, _repeated_players_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class TournamentPlayer : pb::IMessage<TournamentPlayer>
    {
        private static readonly pb::MessageParser<TournamentPlayer> _parser = new pb::MessageParser<TournamentPlayer>(() => new TournamentPlayer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TournamentPlayer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentPlayer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentPlayer(TournamentPlayer other) : this()
        {
            accountId_ = other.accountId_;
            playerNick_ = other.playerNick_;
            playerName_ = other.playerName_;
            playerDob_ = other.playerDob_;
            playerFlag_ = other.playerFlag_;
            playerLocation_ = other.playerLocation_;
            playerDesc_ = other.playerDesc_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentPlayer Clone()
        {
            return new TournamentPlayer(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private uint accountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountId
        {
            get { return accountId_; }
            set
            {
                accountId_ = value;
            }
        }

        /// <summary>Field number for the "player_nick" field.</summary>
        public const int PlayerNickFieldNumber = 2;
        private string playerNick_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerNick
        {
            get { return playerNick_; }
            set
            {
                playerNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "player_name" field.</summary>
        public const int PlayerNameFieldNumber = 3;
        private string playerName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerName
        {
            get { return playerName_; }
            set
            {
                playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "player_dob" field.</summary>
        public const int PlayerDobFieldNumber = 4;
        private uint playerDob_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerDob
        {
            get { return playerDob_; }
            set
            {
                playerDob_ = value;
            }
        }

        /// <summary>Field number for the "player_flag" field.</summary>
        public const int PlayerFlagFieldNumber = 5;
        private string playerFlag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerFlag
        {
            get { return playerFlag_; }
            set
            {
                playerFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "player_location" field.</summary>
        public const int PlayerLocationFieldNumber = 6;
        private string playerLocation_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerLocation
        {
            get { return playerLocation_; }
            set
            {
                playerLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "player_desc" field.</summary>
        public const int PlayerDescFieldNumber = 7;
        private string playerDesc_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerDesc
        {
            get { return playerDesc_; }
            set
            {
                playerDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TournamentPlayer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TournamentPlayer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AccountId != other.AccountId) return false;
            if (PlayerNick != other.PlayerNick) return false;
            if (PlayerName != other.PlayerName) return false;
            if (PlayerDob != other.PlayerDob) return false;
            if (PlayerFlag != other.PlayerFlag) return false;
            if (PlayerLocation != other.PlayerLocation) return false;
            if (PlayerDesc != other.PlayerDesc) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (AccountId != 0) hash ^= AccountId.GetHashCode();
            if (PlayerNick.Length != 0) hash ^= PlayerNick.GetHashCode();
            if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
            if (PlayerDob != 0) hash ^= PlayerDob.GetHashCode();
            if (PlayerFlag.Length != 0) hash ^= PlayerFlag.GetHashCode();
            if (PlayerLocation.Length != 0) hash ^= PlayerLocation.GetHashCode();
            if (PlayerDesc.Length != 0) hash ^= PlayerDesc.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AccountId != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(AccountId);
            }
            if (PlayerNick.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(PlayerNick);
            }
            if (PlayerName.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(PlayerName);
            }
            if (PlayerDob != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(PlayerDob);
            }
            if (PlayerFlag.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(PlayerFlag);
            }
            if (PlayerLocation.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(PlayerLocation);
            }
            if (PlayerDesc.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(PlayerDesc);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AccountId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountId);
            }
            if (PlayerNick.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerNick);
            }
            if (PlayerName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (PlayerDob != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerDob);
            }
            if (PlayerFlag.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerFlag);
            }
            if (PlayerLocation.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerLocation);
            }
            if (PlayerDesc.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerDesc);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TournamentPlayer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AccountId != 0)
            {
                AccountId = other.AccountId;
            }
            if (other.PlayerNick.Length != 0)
            {
                PlayerNick = other.PlayerNick;
            }
            if (other.PlayerName.Length != 0)
            {
                PlayerName = other.PlayerName;
            }
            if (other.PlayerDob != 0)
            {
                PlayerDob = other.PlayerDob;
            }
            if (other.PlayerFlag.Length != 0)
            {
                PlayerFlag = other.PlayerFlag;
            }
            if (other.PlayerLocation.Length != 0)
            {
                PlayerLocation = other.PlayerLocation;
            }
            if (other.PlayerDesc.Length != 0)
            {
                PlayerDesc = other.PlayerDesc;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        AccountId = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        PlayerNick = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        PlayerName = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        PlayerDob = input.ReadUInt32();
                        break;
                    }
                    case 42:
                    {
                        PlayerFlag = input.ReadString();
                        break;
                    }
                    case 50:
                    {
                        PlayerLocation = input.ReadString();
                        break;
                    }
                    case 58:
                    {
                        PlayerDesc = input.ReadString();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CDataGCCStrike15_v2_TournamentInfo : pb::IMessage<CDataGCCStrike15_v2_TournamentInfo>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_TournamentInfo> _parser = new pb::MessageParser<CDataGCCStrike15_v2_TournamentInfo>(() => new CDataGCCStrike15_v2_TournamentInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_TournamentInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentInfo(CDataGCCStrike15_v2_TournamentInfo other) : this()
        {
            sections_ = other.sections_.Clone();
            TournamentEvent = other.tournamentEvent_ != null ? other.TournamentEvent.Clone() : null;
            tournamentTeams_ = other.tournamentTeams_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentInfo Clone()
        {
            return new CDataGCCStrike15_v2_TournamentInfo(this);
        }

        /// <summary>Field number for the "sections" field.</summary>
        public const int SectionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection> _repeated_sections_codec
            = pb::FieldCodec.ForMessage(10, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection> sections_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentSection> Sections
        {
            get { return sections_; }
        }

        /// <summary>Field number for the "tournament_event" field.</summary>
        public const int TournamentEventFieldNumber = 2;
        private global::RyaUploaderV2.ProtoBufs.TournamentEvent tournamentEvent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::RyaUploaderV2.ProtoBufs.TournamentEvent TournamentEvent
        {
            get { return tournamentEvent_; }
            set
            {
                tournamentEvent_ = value;
            }
        }

        /// <summary>Field number for the "tournament_teams" field.</summary>
        public const int TournamentTeamsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.TournamentTeam> _repeated_tournamentTeams_codec
            = pb::FieldCodec.ForMessage(26, global::RyaUploaderV2.ProtoBufs.TournamentTeam.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> tournamentTeams_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.TournamentTeam> TournamentTeams
        {
            get { return tournamentTeams_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_TournamentInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_TournamentInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sections_.Equals(other.sections_)) return false;
            if (!object.Equals(TournamentEvent, other.TournamentEvent)) return false;
            if (!tournamentTeams_.Equals(other.tournamentTeams_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sections_.GetHashCode();
            if (tournamentEvent_ != null) hash ^= TournamentEvent.GetHashCode();
            hash ^= tournamentTeams_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            sections_.WriteTo(output, _repeated_sections_codec);
            if (tournamentEvent_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(TournamentEvent);
            }
            tournamentTeams_.WriteTo(output, _repeated_tournamentTeams_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sections_.CalculateSize(_repeated_sections_codec);
            if (tournamentEvent_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TournamentEvent);
            }
            size += tournamentTeams_.CalculateSize(_repeated_tournamentTeams_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_TournamentInfo other)
        {
            if (other == null)
            {
                return;
            }
            sections_.Add(other.sections_);
            if (other.tournamentEvent_ != null)
            {
                if (tournamentEvent_ == null)
                {
                    tournamentEvent_ = new global::RyaUploaderV2.ProtoBufs.TournamentEvent();
                }
                TournamentEvent.MergeFrom(other.TournamentEvent);
            }
            tournamentTeams_.Add(other.tournamentTeams_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                    {
                        sections_.AddEntriesFrom(input, _repeated_sections_codec);
                        break;
                    }
                    case 18:
                    {
                        if (tournamentEvent_ == null)
                        {
                            tournamentEvent_ = new global::RyaUploaderV2.ProtoBufs.TournamentEvent();
                        }
                        input.ReadMessage(tournamentEvent_);
                        break;
                    }
                    case 26:
                    {
                        tournamentTeams_.AddEntriesFrom(input, _repeated_tournamentTeams_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CDataGCCStrike15_v2_TournamentSection : pb::IMessage<CDataGCCStrike15_v2_TournamentSection>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_TournamentSection> _parser = new pb::MessageParser<CDataGCCStrike15_v2_TournamentSection>(() => new CDataGCCStrike15_v2_TournamentSection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_TournamentSection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentSection()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentSection(CDataGCCStrike15_v2_TournamentSection other) : this()
        {
            sectionid_ = other.sectionid_;
            name_ = other.name_;
            desc_ = other.desc_;
            groups_ = other.groups_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentSection Clone()
        {
            return new CDataGCCStrike15_v2_TournamentSection(this);
        }

        /// <summary>Field number for the "sectionid" field.</summary>
        public const int SectionidFieldNumber = 1;
        private uint sectionid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Sectionid
        {
            get { return sectionid_; }
            set
            {
                sectionid_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "desc" field.</summary>
        public const int DescFieldNumber = 3;
        private string desc_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Desc
        {
            get { return desc_; }
            set
            {
                desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(34, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup> groups_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup> Groups
        {
            get { return groups_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_TournamentSection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_TournamentSection other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Sectionid != other.Sectionid) return false;
            if (Name != other.Name) return false;
            if (Desc != other.Desc) return false;
            if (!groups_.Equals(other.groups_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Sectionid != 0) hash ^= Sectionid.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Desc.Length != 0) hash ^= Desc.GetHashCode();
            hash ^= groups_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Sectionid != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Sectionid);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Desc.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Desc);
            }
            groups_.WriteTo(output, _repeated_groups_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Sectionid != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sectionid);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Desc.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
            }
            size += groups_.CalculateSize(_repeated_groups_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_TournamentSection other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Sectionid != 0)
            {
                Sectionid = other.Sectionid;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Desc.Length != 0)
            {
                Desc = other.Desc;
            }
            groups_.Add(other.groups_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Sectionid = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        Desc = input.ReadString();
                        break;
                    }
                    case 34:
                    {
                        groups_.AddEntriesFrom(input, _repeated_groups_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class CDataGCCStrike15_v2_TournamentGroup : pb::IMessage<CDataGCCStrike15_v2_TournamentGroup>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_TournamentGroup> _parser = new pb::MessageParser<CDataGCCStrike15_v2_TournamentGroup>(() => new CDataGCCStrike15_v2_TournamentGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_TournamentGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroup(CDataGCCStrike15_v2_TournamentGroup other) : this()
        {
            groupid_ = other.groupid_;
            name_ = other.name_;
            desc_ = other.desc_;
            picksDeprecated_ = other.picksDeprecated_;
            teams_ = other.teams_.Clone();
            stageIds_ = other.stageIds_.Clone();
            picklockuntiltime_ = other.picklockuntiltime_;
            pickableteams_ = other.pickableteams_;
            pointsPerPick_ = other.pointsPerPick_;
            picks_ = other.picks_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroup Clone()
        {
            return new CDataGCCStrike15_v2_TournamentGroup(this);
        }

        /// <summary>Field number for the "groupid" field.</summary>
        public const int GroupidFieldNumber = 1;
        private uint groupid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Groupid
        {
            get { return groupid_; }
            set
            {
                groupid_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "desc" field.</summary>
        public const int DescFieldNumber = 3;
        private string desc_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Desc
        {
            get { return desc_; }
            set
            {
                desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "picks__deprecated" field.</summary>
        public const int PicksDeprecatedFieldNumber = 4;
        private uint picksDeprecated_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PicksDeprecated
        {
            get { return picksDeprecated_; }
            set
            {
                picksDeprecated_ = value;
            }
        }

        /// <summary>Field number for the "teams" field.</summary>
        public const int TeamsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam> _repeated_teams_codec
            = pb::FieldCodec.ForMessage(42, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam> teams_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroupTeam> Teams
        {
            get { return teams_; }
        }

        /// <summary>Field number for the "stage_ids" field.</summary>
        public const int StageIdsFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_stageIds_codec
            = pb::FieldCodec.ForInt32(48);
        private readonly pbc::RepeatedField<int> stageIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> StageIds
        {
            get { return stageIds_; }
        }

        /// <summary>Field number for the "picklockuntiltime" field.</summary>
        public const int PicklockuntiltimeFieldNumber = 7;
        private uint picklockuntiltime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Picklockuntiltime
        {
            get { return picklockuntiltime_; }
            set
            {
                picklockuntiltime_ = value;
            }
        }

        /// <summary>Field number for the "pickableteams" field.</summary>
        public const int PickableteamsFieldNumber = 8;
        private uint pickableteams_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pickableteams
        {
            get { return pickableteams_; }
            set
            {
                pickableteams_ = value;
            }
        }

        /// <summary>Field number for the "points_per_pick" field.</summary>
        public const int PointsPerPickFieldNumber = 9;
        private uint pointsPerPick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PointsPerPick
        {
            get { return pointsPerPick_; }
            set
            {
                pointsPerPick_ = value;
            }
        }

        /// <summary>Field number for the "picks" field.</summary>
        public const int PicksFieldNumber = 10;
        private static readonly pb::FieldCodec<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks> _repeated_picks_codec
            = pb::FieldCodec.ForMessage(82, global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks.Parser);
        private readonly pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks> picks_ = new pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Types.Picks> Picks
        {
            get { return picks_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_TournamentGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_TournamentGroup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Groupid != other.Groupid) return false;
            if (Name != other.Name) return false;
            if (Desc != other.Desc) return false;
            if (PicksDeprecated != other.PicksDeprecated) return false;
            if (!teams_.Equals(other.teams_)) return false;
            if (!stageIds_.Equals(other.stageIds_)) return false;
            if (Picklockuntiltime != other.Picklockuntiltime) return false;
            if (Pickableteams != other.Pickableteams) return false;
            if (PointsPerPick != other.PointsPerPick) return false;
            if (!picks_.Equals(other.picks_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Groupid != 0) hash ^= Groupid.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Desc.Length != 0) hash ^= Desc.GetHashCode();
            if (PicksDeprecated != 0) hash ^= PicksDeprecated.GetHashCode();
            hash ^= teams_.GetHashCode();
            hash ^= stageIds_.GetHashCode();
            if (Picklockuntiltime != 0) hash ^= Picklockuntiltime.GetHashCode();
            if (Pickableteams != 0) hash ^= Pickableteams.GetHashCode();
            if (PointsPerPick != 0) hash ^= PointsPerPick.GetHashCode();
            hash ^= picks_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Groupid != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Groupid);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Desc.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Desc);
            }
            if (PicksDeprecated != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(PicksDeprecated);
            }
            teams_.WriteTo(output, _repeated_teams_codec);
            stageIds_.WriteTo(output, _repeated_stageIds_codec);
            if (Picklockuntiltime != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(Picklockuntiltime);
            }
            if (Pickableteams != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(Pickableteams);
            }
            if (PointsPerPick != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(PointsPerPick);
            }
            picks_.WriteTo(output, _repeated_picks_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Groupid != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Groupid);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Desc.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
            }
            if (PicksDeprecated != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PicksDeprecated);
            }
            size += teams_.CalculateSize(_repeated_teams_codec);
            size += stageIds_.CalculateSize(_repeated_stageIds_codec);
            if (Picklockuntiltime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Picklockuntiltime);
            }
            if (Pickableteams != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pickableteams);
            }
            if (PointsPerPick != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointsPerPick);
            }
            size += picks_.CalculateSize(_repeated_picks_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_TournamentGroup other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Groupid != 0)
            {
                Groupid = other.Groupid;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Desc.Length != 0)
            {
                Desc = other.Desc;
            }
            if (other.PicksDeprecated != 0)
            {
                PicksDeprecated = other.PicksDeprecated;
            }
            teams_.Add(other.teams_);
            stageIds_.Add(other.stageIds_);
            if (other.Picklockuntiltime != 0)
            {
                Picklockuntiltime = other.Picklockuntiltime;
            }
            if (other.Pickableteams != 0)
            {
                Pickableteams = other.Pickableteams;
            }
            if (other.PointsPerPick != 0)
            {
                PointsPerPick = other.PointsPerPick;
            }
            picks_.Add(other.picks_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        Groupid = input.ReadUInt32();
                        break;
                    }
                    case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        Desc = input.ReadString();
                        break;
                    }
                    case 32:
                    {
                        PicksDeprecated = input.ReadUInt32();
                        break;
                    }
                    case 42:
                    {
                        teams_.AddEntriesFrom(input, _repeated_teams_codec);
                        break;
                    }
                    case 50:
                    case 48:
                    {
                        stageIds_.AddEntriesFrom(input, _repeated_stageIds_codec);
                        break;
                    }
                    case 56:
                    {
                        Picklockuntiltime = input.ReadUInt32();
                        break;
                    }
                    case 64:
                    {
                        Pickableteams = input.ReadUInt32();
                        break;
                    }
                    case 72:
                    {
                        PointsPerPick = input.ReadUInt32();
                        break;
                    }
                    case 82:
                    {
                        picks_.AddEntriesFrom(input, _repeated_picks_codec);
                        break;
                    }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CDataGCCStrike15_v2_TournamentGroup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Picks : pb::IMessage<Picks>
            {
                private static readonly pb::MessageParser<Picks> _parser = new pb::MessageParser<Picks>(() => new Picks());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Picks> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::RyaUploaderV2.ProtoBufs.CDataGCCStrike15_v2_TournamentGroup.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Picks()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Picks(Picks other) : this()
                {
                    pickids_ = other.pickids_.Clone();
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Picks Clone()
                {
                    return new Picks(this);
                }

                /// <summary>Field number for the "pickids" field.</summary>
                public const int PickidsFieldNumber = 1;
                private static readonly pb::FieldCodec<int> _repeated_pickids_codec
                    = pb::FieldCodec.ForInt32(8);
                private readonly pbc::RepeatedField<int> pickids_ = new pbc::RepeatedField<int>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<int> Pickids
                {
                    get { return pickids_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Picks);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Picks other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!pickids_.Equals(other.pickids_)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    hash ^= pickids_.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    pickids_.WriteTo(output, _repeated_pickids_codec);
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    size += pickids_.CalculateSize(_repeated_pickids_codec);
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Picks other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    pickids_.Add(other.pickids_);
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                            case 8:
                            {
                                pickids_.AddEntriesFrom(input, _repeated_pickids_codec);
                                break;
                            }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class CDataGCCStrike15_v2_TournamentGroupTeam : pb::IMessage<CDataGCCStrike15_v2_TournamentGroupTeam>
    {
        private static readonly pb::MessageParser<CDataGCCStrike15_v2_TournamentGroupTeam> _parser = new pb::MessageParser<CDataGCCStrike15_v2_TournamentGroupTeam>(() => new CDataGCCStrike15_v2_TournamentGroupTeam());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDataGCCStrike15_v2_TournamentGroupTeam> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::RyaUploaderV2.ProtoBufs.MatchinfoReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroupTeam()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroupTeam(CDataGCCStrike15_v2_TournamentGroupTeam other) : this()
        {
            teamId_ = other.teamId_;
            score_ = other.score_;
            correctpick_ = other.correctpick_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDataGCCStrike15_v2_TournamentGroupTeam Clone()
        {
            return new CDataGCCStrike15_v2_TournamentGroupTeam(this);
        }

        /// <summary>Field number for the "team_id" field.</summary>
        public const int TeamIdFieldNumber = 1;
        private int teamId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TeamId
        {
            get { return teamId_; }
            set
            {
                teamId_ = value;
            }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private int score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score
        {
            get { return score_; }
            set
            {
                score_ = value;
            }
        }

        /// <summary>Field number for the "correctpick" field.</summary>
        public const int CorrectpickFieldNumber = 3;
        private bool correctpick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Correctpick
        {
            get { return correctpick_; }
            set
            {
                correctpick_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CDataGCCStrike15_v2_TournamentGroupTeam);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDataGCCStrike15_v2_TournamentGroupTeam other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TeamId != other.TeamId) return false;
            if (Score != other.Score) return false;
            if (Correctpick != other.Correctpick) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TeamId != 0) hash ^= TeamId.GetHashCode();
            if (Score != 0) hash ^= Score.GetHashCode();
            if (Correctpick != false) hash ^= Correctpick.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TeamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(TeamId);
            }
            if (Score != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Score);
            }
            if (Correctpick != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(Correctpick);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TeamId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
            }
            if (Score != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
            }
            if (Correctpick != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDataGCCStrike15_v2_TournamentGroupTeam other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TeamId != 0)
            {
                TeamId = other.TeamId;
            }
            if (other.Score != 0)
            {
                Score = other.Score;
            }
            if (other.Correctpick != false)
            {
                Correctpick = other.Correctpick;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                    {
                        TeamId = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        Score = input.ReadInt32();
                        break;
                    }
                    case 24:
                    {
                        Correctpick = input.ReadBool();
                        break;
                    }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code